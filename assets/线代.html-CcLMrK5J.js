import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,o as i}from"./app-CpxQoXy7.js";const g={};function p(t,e){return i(),l("div",null,e[0]||(e[0]=[n('<p>一生之敌--线代</p><h3 id="矩阵的运算法则" tabindex="-1"><a class="header-anchor" href="#矩阵的运算法则"><span>矩阵的运算法则</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914232754.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><ol><li>本行作为被减数，减去其他行的k倍，保持矩阵的基本性质，可以进行运算（对应行列式2，相）</li></ol></li><li><ol start="2"><li>交换任意两行，也是可以进行的操作（对应行列式3，不同）</li></ol></li><li><ol start="3"><li>某行直接乘k，不改变矩阵性质（对应行列式1，不同）</li></ol></li></ul><h3 id="行列式运算法则" tabindex="-1"><a class="header-anchor" href="#行列式运算法则"><span>行列式运算法则</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914233345.png" alt="image.png" loading="lazy"><br> 行列式，顾名思义行和列都可以进行操作</p><ul><li><ol><li>行和列要乘k，必须先把k提到行列式外面</li></ol></li><li><ol start="2"><li>本行作为被减数，减去其他行的k倍，与原行列式相等，可以进行运算，这也是与矩阵相同的地方</li></ol></li><li><ol start="3"><li>要交换行或者列，必须改变符号</li></ol></li></ul><h2 id="技巧-求秩" tabindex="-1"><a class="header-anchor" href="#技巧-求秩"><span>技巧--求秩</span></a></h2><h3 id="_1-向量组求秩" tabindex="-1"><a class="header-anchor" href="#_1-向量组求秩"><span>1. 向量组求秩</span></a></h3><p>求秩最简单的应用----求秩<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912034102.png" alt="image.png" loading="lazy"></p><h3 id="_2-判断线性相关性" tabindex="-1"><a class="header-anchor" href="#_2-判断线性相关性"><span>2. 判断线性相关性</span></a></h3><p>小弟大哥是什么？<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912035347.png" alt="image.png" loading="lazy"></p><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912035452.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_3-判断-能否能线性表示" tabindex="-1"><a class="header-anchor" href="#_3-判断-能否能线性表示"><span>3. 判断！能否能线性表示</span></a></h3><p>延续了之前的线性组合问题，这题需要做的就是把<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912040106.png" alt="image.png" loading="lazy"></p><h3 id="_4-求最大无关组-不求通解特解版" tabindex="-1"><a class="header-anchor" href="#_4-求最大无关组-不求通解特解版"><span>4. 求最大无关组（不求通解特解版）</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250911234120.png" alt="image.png" loading="lazy"><br> 例题<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250911234407.png" alt="image.png" loading="lazy"></p><h3 id="_5-求方程组的解的个数" tabindex="-1"><a class="header-anchor" href="#_5-求方程组的解的个数"><span>5. 求方程组的解的个数</span></a></h3><p>判断是否常规<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003547.png" alt="image.png" loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003502.png" alt="image.png" loading="lazy"></p><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003606.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="求最简型矩阵能干嘛" tabindex="-1"><a class="header-anchor" href="#求最简型矩阵能干嘛"><span>求最简型矩阵能干嘛？</span></a></h2><h3 id="_1-极大无关组表示向量" tabindex="-1"><a class="header-anchor" href="#_1-极大无关组表示向量"><span>1. 极大无关组表示向量</span></a></h3><p>注意，为什么这个比之前求极大无关组多了个求行最简而不是行阶梯？<br> 因为这题要求的用极大无关组表示其余向量，其余向量需要行最简行形式体现~！而最大无关组根本不用表示！</p><ol><li>化成行最简形式，然后看横看行最简，竖直方向的向量，那个就是极大无关组<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912030214.png" alt="image.png" loading="lazy"></li><li>求其余向量，几乎可以不动脑子，我们横着列出所有的其他向量，然后把极大无关组向量竖着乘进去（不用展开极大无关组），化简可以得到向量的形式<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912030924.png" alt="image.png" loading="lazy"></li></ol><h3 id="_2-求方程的通解和特解" tabindex="-1"><a class="header-anchor" href="#_2-求方程的通解和特解"><span>2. 求方程的通解和特解</span></a></h3><ol><li>先化成行最简型</li><li>然后立即用方程组的形式运算（因为需要记录数在哪一列，在那列就是x几，注意常数列！）</li><li>把每行最左边的数放到等号左边，其余放到右边</li><li>然后发现可能缺一些x，将它们补齐，只需要补充x几等于x几即可<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032606.png" alt="image.png" loading="lazy"></li><li>重要的易混淆来了，我们在右侧补充的x几是跟之前化简出来的行最简有关系的，不能补充行最简的那个纵向！！！<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032845.png" alt="image.png" loading="lazy"><br> 最后我们把这个方程组&quot;切西瓜&quot;，最终答案是下图的x2和x4换成k2和k4即可<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912033346.png" alt="image.png" loading="lazy"><br> 如果要求特解的话，只需要把其中的k1和k2赋值0即可<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032004.png" alt="image.png" loading="lazy"></li></ol><h3 id="_3-求行最简型矩阵" tabindex="-1"><a class="header-anchor" href="#_3-求行最简型矩阵"><span>3. 求行最简型矩阵</span></a></h3><p>不多说，最简单<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912033727.png" alt="image.png" loading="lazy"></p><h2 id="行列式会求-能干什么" tabindex="-1"><a class="header-anchor" href="#行列式会求-能干什么"><span>行列式会求，能干什么</span></a></h2><p>判断 “<em><strong>矩阵</strong></em>” 是否可逆，方法:<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234024.png" alt="image.png" loading="lazy"></p><p>例题：<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234148.png" alt="image.png" loading="lazy"></p><h3 id="_1-求矩阵特征值" tabindex="-1"><a class="header-anchor" href="#_1-求矩阵特征值"><span>1. 求矩阵特征值</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234357.png" alt="image.png" loading="lazy"><br> 注意：行列式算出的特征值的个数必须等于行列式的行数！！！<br> 例题<br> ![image.png](<a href="https://cdn.jsdelivr.net/gh/fakeppa/" target="_blank" rel="noopener noreferrer">https://cdn.jsdelivr.net/gh/fakeppa/</a> blog-img/20250915001611.png)</p><h2 id="综合题目" tabindex="-1"><a class="header-anchor" href="#综合题目"><span>综合题目</span></a></h2><h3 id="_1-求特征向量" tabindex="-1"><a class="header-anchor" href="#_1-求特征向量"><span>1. 求特征向量</span></a></h3><p>涉及知识点：求通解，求特征值</p><p>k1与k2不能全取0！<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915001518.png" alt="image.png" loading="lazy"><br> 解题过程<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915005459.png" alt="image.png" loading="lazy"></p><h3 id="求对角矩阵和可逆矩阵" tabindex="-1"><a class="header-anchor" href="#求对角矩阵和可逆矩阵"><span>求对角矩阵和可逆矩阵</span></a></h3><p>知识点：特征值、特征向量<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010523.png" alt="image.png" loading="lazy"></p><p>解题过程<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010627.png" alt="image.png" loading="lazy"></p><h3 id="求对角矩阵和正交矩阵" tabindex="-1"><a class="header-anchor" href="#求对角矩阵和正交矩阵"><span>求对角矩阵和正交矩阵</span></a></h3><p>知识点：特征值和特征向量<br> 稍麻烦一些<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010841.png" alt="image.png" loading="lazy"></p><h3 id="求二次型的标准型和正交矩阵" tabindex="-1"><a class="header-anchor" href="#求二次型的标准型和正交矩阵"><span>求二次型的标准型和正交矩阵</span></a></h3><h4 id="前置知识-求二次型f的矩阵a" tabindex="-1"><a class="header-anchor" href="#前置知识-求二次型f的矩阵a"><span>前置知识：求二次型f的矩阵A</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915013156.png" alt="image.png" loading="lazy"><br> 对应系数分配<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915014730.png" alt="image.png" loading="lazy"></p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915014820.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>',47)]))}const h=a(g,[["render",p],["__file","线代.html.vue"]]),d=JSON.parse('{"path":"/article/04_%E5%BD%92%E6%A1%A3/%E8%80%83%E8%AF%95%E5%91%A8%E7%A0%B4%E9%98%B2/%E5%A4%A7%E4%B8%80%E4%B8%8B/%E7%BA%BF%E4%BB%A3.html","title":"线代","lang":"zh-CN","frontmatter":{"aliases":null,"cssclasses":null,"tags":null,"icon":"pen-to-square","date":"2025-09-11T00:00:00.000Z","title":"线代","category":["归档"],"description":"一生之敌--线代 矩阵的运算法则 image.pngimage.png 本行作为被减数，减去其他行的k倍，保持矩阵的基本性质，可以进行运算（对应行列式2，相） 交换任意两行，也是可以进行的操作（对应行列式3，不同） 某行直接乘k，不改变矩阵性质（对应行列式1，不同） 行列式运算法则 image.png 行列式，顾名思义行和列都可以进行操作 行和列要乘k...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/04_%E5%BD%92%E6%A1%A3/%E8%80%83%E8%AF%95%E5%91%A8%E7%A0%B4%E9%98%B2/%E5%A4%A7%E4%B8%80%E4%B8%8B/%E7%BA%BF%E4%BB%A3.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"线代"}],["meta",{"property":"og:description","content":"一生之敌--线代 矩阵的运算法则 image.pngimage.png 本行作为被减数，减去其他行的k倍，保持矩阵的基本性质，可以进行运算（对应行列式2，相） 交换任意两行，也是可以进行的操作（对应行列式3，不同） 某行直接乘k，不改变矩阵性质（对应行列式1，不同） 行列式运算法则 image.png 行列式，顾名思义行和列都可以进行操作 行和列要乘k..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914232754.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T17:50:44.000Z"}],["meta",{"property":"article:published_time","content":"2025-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T17:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线代\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914232754.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914233345.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912034102.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912035347.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912035452.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912040106.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250911234120.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250911234407.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003547.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003502.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912003606.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912030214.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912030924.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032606.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032845.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912033346.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912032004.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250912033727.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234024.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234148.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914234357.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/   blog-img/20250915001611.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915001518.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915005459.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010523.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010627.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915010841.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915013156.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915014730.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250915014820.png\\"],\\"datePublished\\":\\"2025-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-14T17:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":3,"title":"矩阵的运算法则","slug":"矩阵的运算法则","link":"#矩阵的运算法则","children":[]},{"level":3,"title":"行列式运算法则","slug":"行列式运算法则","link":"#行列式运算法则","children":[]},{"level":2,"title":"技巧--求秩","slug":"技巧-求秩","link":"#技巧-求秩","children":[{"level":3,"title":"1. 向量组求秩","slug":"_1-向量组求秩","link":"#_1-向量组求秩","children":[]},{"level":3,"title":"2. 判断线性相关性","slug":"_2-判断线性相关性","link":"#_2-判断线性相关性","children":[]},{"level":3,"title":"3. 判断！能否能线性表示","slug":"_3-判断-能否能线性表示","link":"#_3-判断-能否能线性表示","children":[]},{"level":3,"title":"4. 求最大无关组（不求通解特解版）","slug":"_4-求最大无关组-不求通解特解版","link":"#_4-求最大无关组-不求通解特解版","children":[]},{"level":3,"title":"5. 求方程组的解的个数","slug":"_5-求方程组的解的个数","link":"#_5-求方程组的解的个数","children":[]}]},{"level":2,"title":"求最简型矩阵能干嘛？","slug":"求最简型矩阵能干嘛","link":"#求最简型矩阵能干嘛","children":[{"level":3,"title":"1. 极大无关组表示向量","slug":"_1-极大无关组表示向量","link":"#_1-极大无关组表示向量","children":[]},{"level":3,"title":"2. 求方程的通解和特解","slug":"_2-求方程的通解和特解","link":"#_2-求方程的通解和特解","children":[]},{"level":3,"title":"3. 求行最简型矩阵","slug":"_3-求行最简型矩阵","link":"#_3-求行最简型矩阵","children":[]}]},{"level":2,"title":"行列式会求，能干什么","slug":"行列式会求-能干什么","link":"#行列式会求-能干什么","children":[{"level":3,"title":"1. 求矩阵特征值","slug":"_1-求矩阵特征值","link":"#_1-求矩阵特征值","children":[]}]},{"level":2,"title":"综合题目","slug":"综合题目","link":"#综合题目","children":[{"level":3,"title":"1. 求特征向量","slug":"_1-求特征向量","link":"#_1-求特征向量","children":[]},{"level":3,"title":"求对角矩阵和可逆矩阵","slug":"求对角矩阵和可逆矩阵","link":"#求对角矩阵和可逆矩阵","children":[]},{"level":3,"title":"求对角矩阵和正交矩阵","slug":"求对角矩阵和正交矩阵","link":"#求对角矩阵和正交矩阵","children":[]},{"level":3,"title":"求二次型的标准型和正交矩阵","slug":"求二次型的标准型和正交矩阵","link":"#求二次型的标准型和正交矩阵","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]}],"git":{"createdTime":1757605584000,"updatedTime":1757872244000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":61,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":3.36,"words":1009},"filePathRelative":"article/04_归档/考试周破防/大一下/线代.md","localizedDate":"2025年9月11日","excerpt":"<p>一生之敌--线代</p>\\n<h3>矩阵的运算法则</h3>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250914232754.png\\" alt=\\"image.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image.png</figcaption></figure>\\n<ul>\\n<li>\\n<ol>\\n<li>本行作为被减数，减去其他行的k倍，保持矩阵的基本性质，可以进行运算（对应行列式2，相）</li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"2\\">\\n<li>交换任意两行，也是可以进行的操作（对应行列式3，不同）</li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"3\\">\\n<li>某行直接乘k，不改变矩阵性质（对应行列式1，不同）</li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
