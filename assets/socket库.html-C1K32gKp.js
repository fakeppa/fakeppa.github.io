import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as t,o as a}from"./app-C242ypD_.js";const n={};function l(h,s){return a(),i("div",null,s[0]||(s[0]=[t(`<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">scoket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(family,type[,protocol])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建套接字<br> 第一个参数 family 是指定应用程序使用的通信协议的协议族，有：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Family参数</td><td>描述</td></tr><tr><td>socket.AF_UNIX</td><td>只能够用于单一的Unix系统进程间通信</td></tr><tr><td>socket.AF_INET</td><td>服务器之间网络通信</td></tr><tr><td>socket.AF_INET6</td><td>IPv6</td></tr><tr><td>默认值为 AF_INET</td><td></td></tr><tr><td>Type参数</td><td></td></tr></tbody></table><p>描述<br> socket.SOCK_STREAM<br> 流式socket , 当使用TCP时选择此参数</p><p>socket.SOCK_DGRAM<br> 数据报式socket ,当使用UDP时选择此参数</p><p>socket.SOCK_RAW<br> 原始套接字，允许对底层协议如IP、ICMP进行直接访问</p><p>Type参数</p><p>描述<br> socket.IPPROTO_RAW<br> 相当于protocol=255，此时socket只能用来发送IP包，而不能接收任何的数据。发送的数据需要自己填充IP包头，并且自己计算校验和。</p><p>socket.IPPROTO_IP<br> 相当于protocol=0，此时用于接收任何的IP数据包。其中的校验和和协议分析由程序自己完成。</p><h3 id="_1、bind-函数" tabindex="-1"><a class="header-anchor" href="#_1、bind-函数"><span>1、bind 函数</span></a></h3><p>该函数是服务端函数，会将之前创建的套接字与指定的IP地址和端口进行绑定，使用点直接调用该方法，<strong>以元组（host, port）(这很重要)的形式表示地址</strong>。</p><p>比如我们绑定本地的 12345 端口：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12345</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、listen-函数" tabindex="-1"><a class="header-anchor" href="#_2、listen-函数"><span>2、listen 函数</span></a></h3><p>该函数也是服务端函数，用于在使用TCP的服务端开启监听模式，只有一个参数，指定在拒绝连接之前，操作系统可以挂起的最大连接数量，该值至少为1，大部分应用程序设为 5 即可。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3、accept-函数" tabindex="-1"><a class="header-anchor" href="#_3、accept-函数"><span>3、accept 函数</span></a></h3><p>当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求，该函数也是服务端函数，接受 TCP 连接并返回（conn,address），返回一个新的套接字来和客户端通信，其中 conn 是新的套接字对象，可以用来接收和发送数据，address 是连接客户端的地址。</p><p>比如我们就使用 conn 和 address 这两个参数（可自定义）来接收 accept 函数返回的值</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">conn, address </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4、connect-与-connect-ex-函数" tabindex="-1"><a class="header-anchor" href="#_4、connect-与-connect-ex-函数"><span>4、connect 与 connect_ex 函数</span></a></h3><p>connect() 是客户端程序用来连接服务端的方法，客户端连接到 address 处的套接字，一般 address 的格式为元组（host, port），如果连接出错，会返回 socket.error 错误。</p><p>比如我们连接到刚才创建的套接字，即本地的 12345 端口：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12345</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、send-、-sendall-、sendto-函数" tabindex="-1"><a class="header-anchor" href="#_5、send-、-sendall-、sendto-函数"><span>5、send 、 sendall 、sendto 函数</span></a></h3><h4 id="send-用于发送-tcp-数据" tabindex="-1"><a class="header-anchor" href="#send-用于发送-tcp-数据"><span><code>send()</code> ：用于发送 TCP 数据</span></a></h4><p>用法：s.send(string[,flag])</p><p>将 string 中的数据发送到连接的套接字，返回值是要发送的字节数量，该数量可能小于 string 的字节大小。</p><h4 id="sendall-完整发送tcp数据" tabindex="-1"><a class="header-anchor" href="#sendall-完整发送tcp数据"><span><code>sendall()</code> ：完整发送TCP数据</span></a></h4><p>用法：<code>s.sendall(string[,flag])</code></p><p>与 send() 类似，将 string 中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据，成功返回None，失败则抛出异常。</p><p><strong>关于参数的说明：</strong></p><p><code>string</code>: 这是要发送的数据，通常是一个字符串。这是必需的参数。</p><p><code>flag</code> : 这是一个可选的参数，用于指定发送数据的附加选项，在大多数情况下可以省略。</p><p>比如我们将 &quot;Hello, server!&quot; 字符串通过UTF-8编码转换为字节数据，然后使用套接字的 send 方法发送这些字节数据到连接的服务端：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, server!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="sendto-用于发送-udp-数据" tabindex="-1"><a class="header-anchor" href="#sendto-用于发送-udp-数据"><span>sendto ：用于发送 UDP 数据</span></a></h4><p>用法：s.sendto(string[,flag],address)</p><p>将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址，返回值是发送的字节数。</p><h3 id="_6、recv-与-recvfrom-函数" tabindex="-1"><a class="header-anchor" href="#_6、recv-与-recvfrom-函数"><span>6、recv 与 recvfrom 函数</span></a></h3><h4 id="recv-接受tcp套接字的数据-数据以字符串形式返回。" tabindex="-1"><a class="header-anchor" href="#recv-接受tcp套接字的数据-数据以字符串形式返回。"><span>recv ：接受TCP套接字的数据，数据以字符串形式返回。</span></a></h4><p>用法：<code>s.recv(bufsize[,flag])</code></p><p>参数说明：</p><p>bufsize: 这是一个整数，表示要接收的最大字节数。接收的实际数据可能少于或等于这个值，取决于发送端发送的数据量。</p><p>flag（可选）: 这是一个可选的参数，用于指定接收数据的附加选项。在大多数情况下，可以省略这个参数。</p><h3 id="_7、close-函数" tabindex="-1"><a class="header-anchor" href="#_7、close-函数"><span>7、close 函数</span></a></h3><p>该函数用于关闭套接字</p><p>直接使用点调用即可</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,49)]))}const p=e(n,[["render",l],["__file","socket库.html.vue"]]),c=JSON.parse('{"path":"/article/02_%E9%A2%86%E5%9F%9F/Python/socket%E5%BA%93.html","title":"socket库","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-07T00:00:00.000Z","tags":null,"title":"socket库","category":["领域"],"description":"创建套接字 第一个参数 family 是指定应用程序使用的通信协议的协议族，有： 描述 socket.SOCK_STREAM 流式socket , 当使用TCP时选择此参数 socket.SOCK_DGRAM 数据报式socket ,当使用UDP时选择此参数 socket.SOCK_RAW 原始套接字，允许对底层协议如IP、ICMP进行直接访问 Typ...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/Python/socket%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"socket库"}],["meta",{"property":"og:description","content":"创建套接字 第一个参数 family 是指定应用程序使用的通信协议的协议族，有： 描述 socket.SOCK_STREAM 流式socket , 当使用TCP时选择此参数 socket.SOCK_DGRAM 数据报式socket ,当使用UDP时选择此参数 socket.SOCK_RAW 原始套接字，允许对底层协议如IP、ICMP进行直接访问 Typ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-12T05:07:41.000Z"}],["meta",{"property":"article:published_time","content":"2025-06-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-12T05:07:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"socket库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-12T05:07:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1、bind 函数","slug":"_1、bind-函数","link":"#_1、bind-函数","children":[]},{"level":3,"title":"2、listen 函数","slug":"_2、listen-函数","link":"#_2、listen-函数","children":[]},{"level":3,"title":"3、accept 函数","slug":"_3、accept-函数","link":"#_3、accept-函数","children":[]},{"level":3,"title":"4、connect 与 connect_ex 函数","slug":"_4、connect-与-connect-ex-函数","link":"#_4、connect-与-connect-ex-函数","children":[]},{"level":3,"title":"5、send 、 sendall 、sendto 函数","slug":"_5、send-、-sendall-、sendto-函数","link":"#_5、send-、-sendall-、sendto-函数","children":[]},{"level":3,"title":"6、recv 与 recvfrom 函数","slug":"_6、recv-与-recvfrom-函数","link":"#_6、recv-与-recvfrom-函数","children":[]},{"level":3,"title":"7、close 函数","slug":"_7、close-函数","link":"#_7、close-函数","children":[]}],"git":{"createdTime":1749294806000,"updatedTime":1752296861000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":123,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":3.51,"words":1052},"filePathRelative":"article/02_领域/Python/socket库.md","localizedDate":"2025年6月7日","excerpt":"<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" data-title=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#61AFEF\\">scoket</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(family,type[,protocol])</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,c as data};
