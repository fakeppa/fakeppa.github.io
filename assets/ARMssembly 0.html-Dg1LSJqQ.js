import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as i}from"./app-D9BBVIcK.js";const l={};function t(p,s){return i(),a("div",null,s[0]||(s[0]=[e(`<p>9,593 users solved</p><h4 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h4><p>What integer does this program print with arguments <code>266134863</code> and <code>1592237099</code>? File: <a href="https://mercury.picoctf.net/static/104d6022bcea93f53083aeb61b134e8b/chall.S" target="_blank" rel="noopener noreferrer">chall.S</a> Flag format: picoCTF{XXXXXXXX} -&gt; (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF{0055aabb})</p><h4 id="hints" tabindex="-1"><a class="header-anchor" href="#hints"><span>Hints</span></a></h4><p>Simple compare</p><hr><h1 id="_00-前言" tabindex="-1"><a class="header-anchor" href="#_00-前言"><span>00. 前言</span></a></h1><p>没有汇编基础，现学现卖吧</p><h1 id="_01-解题过程" tabindex="-1"><a class="header-anchor" href="#_01-解题过程"><span>01. 解题过程</span></a></h1><p>静态分析，从头看起</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	.arch armv8-a</span></span>
<span class="line"><span>	.file	&quot;chall.c&quot;</span></span>
<span class="line"><span>	.text</span></span>
<span class="line"><span>	.align	2</span></span>
<span class="line"><span>	.global	func1</span></span>
<span class="line"><span>	.type	func1, %function</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.arch : armv8-a：指定了目标架构为ARMv8-A，是一个ARM架构的64位版本</li><li>.file &quot;chall.c&quot;:这是一个伪指令，用于告诉汇编器这个汇编代码是从哪个C文件转换过来的，通常用于调试信息</li><li>.text：指示接下来的代码是程序的文本段，也就是可执行代码</li><li>.align 2 ：对齐指令，确保func1函数的地址在内存中是2的倍数，这有助于提高代码的执行效率<br> 对齐数据：在cpu位数高于内存位数的时候</li><li>.global func1声明了这是一个全局标号，意味着这个标号在其他源文件中被引用</li><li>.type func1, %function:声明了func1是一个函数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func1:</span></span>
<span class="line"><span>	sub	sp, sp, #16</span></span>
<span class="line"><span>	str	w0, [sp, 12]</span></span>
<span class="line"><span>	str	w1, [sp, 8]</span></span>
<span class="line"><span>	ldr	w1, [sp, 12]</span></span>
<span class="line"><span>	ldr	w0, [sp, 8]</span></span>
<span class="line"><span>	cmp	w1, w0</span></span>
<span class="line"><span>	bls	.L2</span></span>
<span class="line"><span>	ldr	w0, [sp, 12]</span></span>
<span class="line"><span>	b	.L3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sub sp, sp, #16:减少了栈指针sp的值，为局部变量或函数调用的参数和返回地址分配空间。这里分配了16字节的空间计算寄存器：sp减去16，存入结果向sp寄存器</li><li><code>str w0, [sp, 12]</code>：将w0寄存器的内容加载到栈指针偏移12的内存地址中</li><li><code>ldr w1, [sp, 12]</code>：将栈指针偏移12的内容加载到w1这个寄存器中</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.L3:</span></span>
<span class="line"><span>	add	sp, sp, 16</span></span>
<span class="line"><span>	ret</span></span>
<span class="line"><span>	.size	func1, .-func1</span></span>
<span class="line"><span>	.section	.rodata</span></span>
<span class="line"><span>	.align	3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>这是func1的结束代码段</em></p><ul><li><p>add sp, sp, 16:对sp栈指针进行相加16，释放栈空间</p></li><li><p>ret：指示函数的返回，ret是一个伪指令</p></li><li><p>.size func1, .-func1：告诉连接器，这个函数func1的大小</p><p>什么是连接器？<br> 汇编程序通常由多个源文件组成，每个文件编译后生成一个目标文件。链接器将这些目标文件合并，处理符号解析和地址重定位，最终生成可执行文件。<br> 具体过程：</p><ol><li>符号解析，有些文件定义的函数或变量，连接器负责解析这些符号的引用</li><li>重定位，文件在编译时可能会使用相对地址，连接器将这些地址转换为最终可执行文件中的绝对地址</li><li>合并目标文件，将多个目标文件合并成一个可执行文件或者库</li><li>生成可执行文件，连接器负责生成最终的可执行文件格式：如elf、pe等文件，确保符合操作系统的要求，可以被执行</li></ol></li><li><p>.section .rodata:指示以后的代码和数据放入.rodata段，用于存储程序中的只读数据</p></li><li><p>.align 3:之前分析过了</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.LC0:</span></span>
<span class="line"><span>	.string	&quot;Result: %ld\\n&quot;</span></span>
<span class="line"><span>	.text</span></span>
<span class="line"><span>	.align	2</span></span>
<span class="line"><span>	.global	main</span></span>
<span class="line"><span>	.type	main, %function</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>.string &quot;Result: %ld\\n&quot;:定义了一个字符串常量。.string是GUN汇编器(GAS)的伪指令，用于在只读数据段(.rodata)中创建了一个字符串常量。这里的字符串时“Result: %ld\\n ”,它通常用于格式化输出一个长整型(%1d)数值，并在末尾添加一个换行符。<br><em><strong>什么是汇编器，汇编器都有哪些</strong></em></p><ul><li><strong>汇编器</strong>（Assembler）是将汇编语言代码转换为机器语言代码的工具。</li><li><strong>NASM (Netwide Assembler)</strong>、<strong>MASM (Microsoft Macro Assembler)</strong>、<strong>GAS (GNU Assembler)</strong>、<strong>FASM (Flat Assembler)</strong>、<strong>TASM (Turbo Assembler)</strong>、<strong>LLVM Assembler</strong>。</li></ul></li><li><p>注意.text之后的内容为代码段</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>main:</span></span>
<span class="line"><span>	stp	x29, x30, [sp, -48]!</span></span>
<span class="line"><span>	add	x29, sp, 0</span></span>
<span class="line"><span>	str	x19, [sp, 16]</span></span>
<span class="line"><span>	str	w0, [x29, 44]</span></span>
<span class="line"><span>	str	x1, [x29, 32]</span></span>
<span class="line"><span>	ldr	x0, [x29, 32]</span></span>
<span class="line"><span>	add	x0, x0, 8</span></span>
<span class="line"><span>	ldr	x0, [x0]</span></span>
<span class="line"><span>	bl	atoi</span></span>
<span class="line"><span>	mov	w19, w0</span></span>
<span class="line"><span>	ldr	x0, [x29, 32]</span></span>
<span class="line"><span>	add	x0, x0, 16</span></span>
<span class="line"><span>	ldr	x0, [x0]</span></span>
<span class="line"><span>	bl	atoi</span></span>
<span class="line"><span>	mov	w1, w0</span></span>
<span class="line"><span>	mov	w0, w19</span></span>
<span class="line"><span>	bl	func1</span></span>
<span class="line"><span>	mov	w1, w0</span></span>
<span class="line"><span>	adrp	x0, .LC0</span></span>
<span class="line"><span>	add	x0, x0, :lo12:.LC0</span></span>
<span class="line"><span>	bl	printf</span></span>
<span class="line"><span>	mov	w0, 0</span></span>
<span class="line"><span>	ldr	x19, [sp, 16]</span></span>
<span class="line"><span>	ldp	x29, x30, [sp], 48</span></span>
<span class="line"><span>	ret</span></span>
<span class="line"><span>	.size	main, .-main</span></span>
<span class="line"><span>	.ident	&quot;GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0&quot;</span></span>
<span class="line"><span>	.section	.note.GNU-stack,&quot;&quot;,@progbits</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>main: ：这是程序的入口点</li><li><code>stp x29, x30, [sp, -48]!</code> ：将当前的帧指针x29和返回地址x30保存到栈中，更新栈指针sp，！表示在存储后更新sp的值<br> stp：是指令操作码，表示存储一对寄存器到内存<br><code>[]</code>:表示这是一个内存地址操作</li></ul>`,21)]))}const c=n(l,[["render",t],["__file","ARMssembly 0.html.vue"]]),o=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/picoCTF/%E9%80%86%E5%90%91reverse/ARMssembly%200.html","title":"ARMssembly 0","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-27T00:00:00.000Z","tags":null,"title":"ARMssembly 0","category":["项目"],"description":"9,593 users solved Description What integer does this program print with arguments 266134863 and 1592237099? File: chall.S Flag format: picoCTF{XXXXXXXX} -> (hex, lowercase, no ...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/picoCTF/%E9%80%86%E5%90%91reverse/ARMssembly%200.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"ARMssembly 0"}],["meta",{"property":"og:description","content":"9,593 users solved Description What integer does this program print with arguments 266134863 and 1592237099? File: chall.S Flag format: picoCTF{XXXXXXXX} -> (hex, lowercase, no ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-01T06:42:56.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-01T06:42:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ARMssembly 0\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-01T06:42:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1735283131000,"updatedTime":1735713776000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":86,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":3.67,"words":1102},"filePathRelative":"article/01_项目/picoCTF/逆向reverse/ARMssembly 0.md","localizedDate":"2024年12月27日","excerpt":"<p>9,593&nbsp;users solved</p>\\n<h4>Description</h4>\\n<p>What integer does this program print with arguments&nbsp;<code>266134863</code>&nbsp;and&nbsp;<code>1592237099</code>? File:&nbsp;<a href=\\"https://mercury.picoctf.net/static/104d6022bcea93f53083aeb61b134e8b/chall.S\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">chall.S</a>&nbsp;Flag format: picoCTF{XXXXXXXX} -&gt; (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF{0055aabb})</p>","autoDesc":true}');export{c as comp,o as data};
