import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as s,o as t}from"./app-DeDudCsK.js";const n={};function p(l,e){return t(),a("div",null,e[0]||(e[0]=[s(`<p>29,953 users solved<br> Author: syreal</p><h4 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h4><p><a href="https://mercury.picoctf.net/static/a6d9cac3bfa4935ceb50c145d3ff5586/keygenme-trial.py" target="_blank" rel="noopener noreferrer">keygenme-trial.py</a></p><h1 id="_00-前言" tabindex="-1"><a class="header-anchor" href="#_00-前言"><span>00. 前言</span></a></h1><p>本题用python编程，很抱歉的是，我的python功底很差，还有就是python环境还是不全，以后要补齐环境，并且有些函数仍然需要上互联网查询，也被这些无用代码干扰到了，所以这题也浪费了很长时间</p><hr><h1 id="_01-解题过程" tabindex="-1"><a class="header-anchor" href="#_01-解题过程"><span>01. 解题过程</span></a></h1><h2 id="_1x01-代码审计" tabindex="-1"><a class="header-anchor" href="#_1x01-代码审计"><span>1x01. 代码审计</span></a></h2><p>分析代码入口点<code>ui_flow()</code><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174546.png" alt="image.png" loading="lazy"><br> 根据函数摸到了menu逻辑部分<code>menu_trial()</code><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174631.png" alt="image.png" loading="lazy"></p><p>从menu的逻辑部分摸到了a,b,c,d具体的作用<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174721.png" alt="image.png" loading="lazy"><br><code>随后根据a,b,d调用的函数发现了a,b,d都是空壳，只有c程序有用</code></p><p>这是c的代码<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174854.png" alt="image.png" loading="lazy"><br> 发现了输入密钥的逻辑，他会拿着我们的user_key去进行一个check_key的操作,并传入一个全局变量bUsername_trial<br> 于是我们去看看<code>bUsername_trial</code>是什么东西<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175251.png" alt="image.png" loading="lazy"><br> 发现了字节码<code>b&quot;PRITCHARD&quot;</code></p><p>好了，让我们进入<code>check_key</code>吧<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175418.png" alt="image.png" loading="lazy"><br> 这看起来有些复杂，让我们从头开始<br> 首先他声明了一个全局变量<code>key_full_template_trial</code><br> 去找<code>key_full_template_trial</code><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175634.png" alt="image.png" loading="lazy"><br> 发现了<code>key_full_template_trial</code>由三部分组成，如上图</p><p>我们把它组合起来：<code>picoCTF{1n_7h3_|&lt;3y_of_xxxxxxxx}</code>这看起来是flag格式<br> 同时我们注意到了<code>key_part_static1_trial</code>这也是需要用到的内容。<br> 别忘了传入的<code>bUsername_trial</code>=<code>b&quot;PRITCHARD&quot;</code></p><h2 id="_1x02-获得flag" tabindex="-1"><a class="header-anchor" href="#_1x02-获得flag"><span>1x02. 获得flag</span></a></h2><p>我把check_key代码分成三部分</p><h3 id="第一部分" tabindex="-1"><a class="header-anchor" href="#第一部分"><span>第一部分</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175928.png" alt="image.png" loading="lazy"><br><em>检查key的长度是否和<code>key_full_template_trial</code>相等</em></p><h3 id="第二部分" tabindex="-1"><a class="header-anchor" href="#第二部分"><span>第二部分</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223180212.png" alt="image.png" loading="lazy"><br> 检查key的第一部分(<code>key_full_template_trial</code>被分成了三部分)是否与<code>key_full_template_trial</code>的第一部分，也就是<code>key_part_static1_trial</code>相等，于是，我们便获得了第一部分key：\`picoCTF{1n_7h3_|&lt;3y_of_</p><h3 id="第三部分" tabindex="-1"><a class="header-anchor" href="#第三部分"><span>第三部分</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223180454.png" alt="image.png" loading="lazy"><br> 这里的i是从上面传递下来的，也就是检查key第一部分之后的内容<br> 可以看到它对<code>bUsername_trial</code>计算了SHA-256值，并将结果转化为16进制，然后分别取了4、5、3、6、2、7、1、8索引的位置<br> 于是我们写这样一个简单的脚本提取这些位置的字符串</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hashlib  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">username_trial </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PRITCHARD&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hashlib.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sha256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username_trial).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">hexdigest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">username_trial.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>54ef6292</code><br> 然后将他添加到我们的key中，最后用}闭合：<code>picoCTF{1n_7h3_|&lt;3y_of_54ef6292}</code></p><h2 id="_1x03-检查" tabindex="-1"><a class="header-anchor" href="#_1x03-检查"><span>1x03. 检查</span></a></h2><p>它与key_full_template_trial的长度恰好相等<br> 我们在程序里检查一下<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223181722.png" alt="image.png" loading="lazy"><br> 完美，获得flag</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>picoCTF{1n_7h3_|&lt;3y_of_54ef6292}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,26)]))}const d=i(n,[["render",p],["__file","keygenme-py.html.vue"]]),g=JSON.parse('{"path":"/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/keygenme-py.html","title":"keygenme-py","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-23T00:00:00.000Z","tags":null,"title":"keygenme-py","category":["领域"],"description":"29,953 users solved Author: syreal Description keygenme-trial.py 00. 前言 本题用python编程，很抱歉的是，我的python功底很差，还有就是python环境还是不全，以后要补齐环境，并且有些函数仍然需要上互联网查询，也被这些无用代码干扰到了，所以这题也浪费了很长时间 01. 解题...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/keygenme-py.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"keygenme-py"}],["meta",{"property":"og:description","content":"29,953 users solved Author: syreal Description keygenme-trial.py 00. 前言 本题用python编程，很抱歉的是，我的python功底很差，还有就是python环境还是不全，以后要补齐环境，并且有些函数仍然需要上互联网查询，也被这些无用代码干扰到了，所以这题也浪费了很长时间 01. 解题..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174546.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T05:49:22.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T05:49:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"keygenme-py\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174546.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174631.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174721.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223174854.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175251.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175418.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175634.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223175928.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223180212.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223180454.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241223181722.png\\"],\\"datePublished\\":\\"2024-12-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T05:49:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1x01. 代码审计","slug":"_1x01-代码审计","link":"#_1x01-代码审计","children":[]},{"level":2,"title":"1x02. 获得flag","slug":"_1x02-获得flag","link":"#_1x02-获得flag","children":[{"level":3,"title":"第一部分","slug":"第一部分","link":"#第一部分","children":[]},{"level":3,"title":"第二部分","slug":"第二部分","link":"#第二部分","children":[]},{"level":3,"title":"第三部分","slug":"第三部分","link":"#第三部分","children":[]}]},{"level":2,"title":"1x03. 检查","slug":"_1x03-检查","link":"#_1x03-检查","children":[]}],"git":{"createdTime":1734952038000,"updatedTime":1757224162000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":1255,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"article/02_领域/picoCTF/逆向 reverse/keygenme-py.md","localizedDate":"2024年12月23日","excerpt":"<p>29,953&nbsp;users solved<br>\\nAuthor:&nbsp;syreal</p>\\n<h4>Description</h4>\\n<p><a href=\\"https://mercury.picoctf.net/static/a6d9cac3bfa4935ceb50c145d3ff5586/keygenme-trial.py\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">keygenme-trial.py</a></p>\\n<h1>00. 前言</h1>\\n<p>本题用python编程，很抱歉的是，我的python功底很差，还有就是python环境还是不全，以后要补齐环境，并且有些函数仍然需要上互联网查询，也被这些无用代码干扰到了，所以这题也浪费了很长时间</p>","autoDesc":true}');export{d as comp,g as data};
