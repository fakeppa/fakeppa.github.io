import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-Cg9wSJkn.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p>选择10，判断，程序填空，编程2，类与对象，数组，分离数字</p><p>this:<br> 表示当前对象<br> 调用本类的其他构造方法：this(实参)，调用有参的构造方法，并赋予默认值</p><h1 id="重写、重载和覆盖" tabindex="-1"><a class="header-anchor" href="#重写、重载和覆盖"><span>重写、重载和覆盖</span></a></h1><ul><li><p>重写是子类和父类之间，子类有一个与父类完全相同的方法声明，优先调用子类的方法</p></li><li><p>重载是同一类中，方法名相同，参数列表不同</p></li><li><p>覆盖和重写是一个意思</p></li></ul><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><ul><li><p>Math.abs():取绝对值</p></li><li><p>.equals():比较两个字符串是否相等</p></li><li><p>str.substring(0, 3):提取前3个字符串，与python不同的是这个方法不会包括第3（也就是第四个字符）数学表达：<code>[0,3)</code></p></li><li><p>str.charAt(int index):访问单独的字符，hh幽默</p></li><li><p>math.random() 一般乘10的倍数并用(int)强转接当随机数使用</p><ul><li><strong>返回值</strong>：<code>Math.random()</code> 返回一个大于等于 0 且小于 1 的浮点数。</li><li><strong>无参数</strong>：不需要传入任何参数。</li></ul></li><li><p>可以用integer.parseTnt(&quot;3&quot;):将字符串3转为数字int类型3</p></li><li><p>super.方法会执行父类的当前方法，然后执行子类的本方法</p></li><li><p>String方法把数组转化成字符串</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 char 数组创建字符串</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] charBuffer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;H&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;e&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;l&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;l&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(charBuffer)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s1);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: Hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h1><h2 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h2><p><code>for (i=0; i&lt;8; i++)</code> 循环的执行顺序：</p><ol><li><strong>初始化</strong>：<code>i</code> 被初始化为 0。</li><li><strong>条件检查</strong>：检查 <code>i&lt;8</code> 是否为真。因为 <code>i</code> 初始值为 0，所以条件为真，进入循环体。</li><li><strong>循环体</strong>：执行循环体内的代码。</li><li><strong>更新</strong>：<code>i</code> 的值增加 1（<code>i++</code>）。</li><li><strong>回到条件检查</strong>：再次检查 <code>i&lt;8</code> 是否为真。如果为真，重复步骤 3 和 4；如果为假，循环结束</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222181902.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>this用法<br> 在Java中，<code>this</code> 关键字是一个引用，它指向当前对象的实例。<code>this</code> 可以用于多种情况，以下是一些主要用途：</p><ol><li><strong>区分成员变量和方法参数</strong>：当方法参数的名称与类的成员变量名称相同时，可以使用 <code>this</code> 来区分它们。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 this 来引用成员变量，而不是方法参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>调用当前对象的其他方法</strong>：在类的方法内部，可以使用 <code>this</code> 来调用当前对象的其他方法。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> radius</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> radius</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">radius</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> radius;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 调用当前对象的 calculateArea 方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculateArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Area: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PI</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> radius </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> radius));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>在返回语句中返回当前对象</strong>：在方法中，可以使用 <code>this</code> 来返回当前对象的引用。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 假设有代码将 str 添加到内部字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回当前对象的引用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>在构造函数中调用另一个构造函数</strong>：可以使用 <code>this</code> 调用同一个类中的另一个构造函数。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认构造函数调用带两个参数的构造函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>在匿名内部类中引用外部类的成员</strong>：在匿名内部类中，可以使用 <code>this</code> 来引用外部类的成员。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OuterClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OuterClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createRunnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 引用外部类的成员变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述最后一个例子中，匿名内部类中的 <code>this</code> 引用的是匿名类的对象，而不是 <code>OuterClass</code> 的对象。要引用外部类的成员，需要直接使用成员变量的名称或者使用 <code>OuterClass.this</code>。</p><p>逻辑运算符：<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/c9312309123.png" alt="495280310e08f893cd1fb31b1e56658c.png" loading="lazy"><br> 这个的异或逻辑是错误的，都是0或者1的话，会返回True</p><p>setter方法快捷键：<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/IHASDwdwd6.png" alt="image.png" loading="lazy"><br> 学eclipse就是学快捷键：（靠北啦，只是应付考试而已了）</p><h1 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键"><span>快捷键</span></a></h1><h2 id="一、常用快捷键" tabindex="-1"><a class="header-anchor" href="#一、常用快捷键"><span>一、常用快捷键</span></a></h2><h3 id="_1、代码注释快捷键" tabindex="-1"><a class="header-anchor" href="#_1、代码注释快捷键"><span>1、代码注释快捷键</span></a></h3><p>1）Ctrl + / ：注释或取消当前行。</p><p>2）Ctrl + Shift + / ：注释多行。</p><p>3）Ctrl + Shift + \\ ：取消多行注释。</p><p>4）Alt+Shift+J(方法注释) ：</p><p>在方法上按Alt+Shift+J可以添加Javadoc 注释 ，或者不用快捷键，先敲“/”在敲两个**，然后回车也可以。</p><h3 id="_2、代码格式化快捷键" tabindex="-1"><a class="header-anchor" href="#_2、代码格式化快捷键"><span>2、代码格式化快捷键</span></a></h3><p>Ctrl + Shift + F ：书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，选定后按此快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文件。</p><h3 id="_3、代码自动提示快捷键" tabindex="-1"><a class="header-anchor" href="#_3、代码自动提示快捷键"><span>3、代码自动提示快捷键</span></a></h3><p>Alt + /</p><h3 id="_4、快速修正快捷键" tabindex="-1"><a class="header-anchor" href="#_4、快速修正快捷键"><span>4、快速修正快捷键</span></a></h3><p>Ctrl + 1</p><h3 id="_5、编辑快捷键" tabindex="-1"><a class="header-anchor" href="#_5、编辑快捷键"><span>5、编辑快捷键</span></a></h3><p>1）Ctrl + D ：删除当前行。</p><p>2）Ctrl + Alt + ↓ 和 Ctrl + Alt + ↑ ：</p><p>复制当前行 ，Ctrl+Alt+↓复制当前行到下一行，Ctrl+Alt+↑复制当前行到上一行。需要说明的是，这个快捷键在Ubuntu下与工作区切换冲突，建议改为Ctrl+↑。</p><p>3）Ctrl + M ：窗口最大化和还原，用户在窗口中进行操作时，总会觉得当前窗口小，这时可以使用这个快捷键。</p><p>4）Ctrl + Shift + S ：</p><p>全局保存，用来检查XML错误和提供资源。Eclipse在编写XML文档时不能实时检查语法错误，如果编写了Resource、Layout方面的信息不保存的话Eclipse也不会智能提示。</p><p>5）Alt + ↑ 和 Alt + ↓ ：</p><p>上下两行交换位置。可以将上下两行的位置对调，也可以是选中的几行与上下一行对调，与上一行对调的快捷键是Alt+↑，与下一行对调的快捷键是Alt+↓。</p><p>6）Ctrl + Shift + M ：(先把光标放在需导入包的类名上) 作用是加<a href="https://so.csdn.net/so/search?q=Import%E8%AF%AD%E5%8F%A5&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">Import语句</a>。</p><h3 id="_6、查看和定位快捷键" tabindex="-1"><a class="header-anchor" href="#_6、查看和定位快捷键"><span>6、查看和定位快捷键</span></a></h3><p>1）Ctrl + K 和 Ctrl + Shift + K ：</p><p>快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。</p><p>2）Ctrl + Shift + T ：</p><p>查找工作空间（Workspace）构建路径中的可找到Java类文件，不要为找不到类而痛苦，而且可以使用“*”、“？”等通配符。</p><p>3）Ctrl + Shift + R ：</p><p>查找工作空间（Workspace）中的所有文件（包括Java文件），也可以使用通配符。</p><p>4）Ctrl + G ：查找当前元素的声明</p><p>5）Ctrl + Shift + G ：</p><p>查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，可以通过此快捷键迅速定位所有引用此方法的位置。</p><p>6）Ctrl + Shift + O ：</p><p>快速生成import，当从网上拷贝一段程序后，不知道如何import进所调用的类，试试【Ctrl+Shift+O】快捷键。也可以移除未使用的import引用。当我们之前添加的import，现在没有用到就会出现一些感叹号，使用快捷键可以移除所有未使用的。</p><p>7）ALT + Shift + W ：</p><p>查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所在的包时，此快捷键非常有用（特别在比较大的项目中）。</p><p>8）Ctrl + L ：定位到当前编辑器的某一行，对非Java文件也有效。</p><p>9）Alt + ←和 Alt + → ：</p><p>后退历史记录和前进历史记录，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，但可能记不清楚了，可以通过这两个快捷键定位查找的顺序。</p><p>10）F3 : 快速定位光标位置的某个类、方法和属性。</p><p>11）F4 ：显示<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">类的继承</a>关系，并打开类继承视图。</p><p>12）Ctrl + H ：查找 ，可以在整个工程查找或者查找替换</p><h3 id="_7、调试快捷键" tabindex="-1"><a class="header-anchor" href="#_7、调试快捷键"><span>7、调试快捷键</span></a></h3><p>1）Ctrl + Shift + B ：在当前行设置断点或取消设置的断点。</p><p>2）F11 ：调试最后一次执行的程序。</p><p>3）Ctrl + F11 ：运行最后一次执行的程序。</p><p>4）F5 ：单步跟踪到方法中。</p><p>5）Ctrl + F5 ：单步跳入选择。</p><p>6）Shift + F5 ：使用过滤器单步执行。</p><p>7）F6 ：单步执行程序。</p><p>8）F7 ：执行完方法，返回到调用此方法的后一条语句。</p><p>9）F8 ：继续执行，到下一个断点或程序结束。</p><h2 id="二、常用设置" tabindex="-1"><a class="header-anchor" href="#二、常用设置"><span>二、常用设置</span></a></h2><h3 id="_1、设置workspace中文件编码" tabindex="-1"><a class="header-anchor" href="#_1、设置workspace中文件编码"><span>1、设置Workspace中文件编码</span></a></h3><p>在eclipse中，默认的Text file encoding是GBK（操作系统是中文简体）；如果操作系统是中文繁体，默认是MS950（Big5）</p><p>项目中大多使用的是UTF-8</p><p>通过在eclipse中对workspace修改编码格式，如下：</p><p>Window -&gt; Preferences -&gt; General -&gt; Workspace -&gt; Text file encoding -&gt; Other , 修改成 UTF-8</p><h3 id="_2、代码自动提示" tabindex="-1"><a class="header-anchor" href="#_2、代码自动提示"><span>2、代码自动提示</span></a></h3><p>Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist -&gt; Auto Activation</p><p>默认设置是输入“.” 后，才会出现提示。想要输入什么都提示，可以修改这里的第二项“Auto Activation Triggers for Java”,</p><p>把&quot;.&quot;修改为&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;， 这样就会 输入每个字母都提示。</p><p>同样的方法，可以修改Javascript和HTML页面的代码提示：</p><p>Window -&gt; Preferences -&gt; JavaScript-&gt; Editor -&gt; Content Assist -&gt; Auto-Activation</p><p>Window -&gt; Preferences -&gt; Web -&gt; HTML Files -&gt; Editor -&gt; Content Assist -&gt; Auto Activation</p><h3 id="_3、设置jsp文件编码" tabindex="-1"><a class="header-anchor" href="#_3、设置jsp文件编码"><span>3、设置JSP文件编码</span></a></h3><p>Window -&gt; Preferences -&gt; Web -&gt; JSP Files -&gt; Encoding (一般是设置为UTF-8)</p><h3 id="_4、如何在eclipse中调整package的上下顺序" tabindex="-1"><a class="header-anchor" href="#_4、如何在eclipse中调整package的上下顺序"><span>4、如何在Eclipse中调整package的上下顺序</span></a></h3><p>设置： 右键项目 -&gt; Build Path -&gt; Configure Build Path -&gt; 右侧，Order and Export -&gt; Up or Down。</p>`,97)]))}const r=s(t,[["render",e],["__file","应试JAVA.html.vue"]]),d=JSON.parse('{"path":"/article/04_%E5%BD%92%E6%A1%A3/%E8%80%83%E8%AF%95%E5%91%A8%E7%A0%B4%E9%98%B2/%E5%BA%94%E8%AF%95JAVA.html","title":"应试JAVA","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-15T00:00:00.000Z","tags":["这下不得不学了吧","投机取巧","现在立刻停止重新造轮子"],"title":"应试JAVA","category":["归档"],"description":"选择10，判断，程序填空，编程2，类与对象，数组，分离数字 this: 表示当前对象 调用本类的其他构造方法：this(实参)，调用有参的构造方法，并赋予默认值 重写、重载和覆盖 重写是子类和父类之间，子类有一个与父类完全相同的方法声明，优先调用子类的方法 重载是同一类中，方法名相同，参数列表不同 覆盖和重写是一个意思 函数 Math.abs():取绝...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/04_%E5%BD%92%E6%A1%A3/%E8%80%83%E8%AF%95%E5%91%A8%E7%A0%B4%E9%98%B2/%E5%BA%94%E8%AF%95JAVA.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"应试JAVA"}],["meta",{"property":"og:description","content":"选择10，判断，程序填空，编程2，类与对象，数组，分离数字 this: 表示当前对象 调用本类的其他构造方法：this(实参)，调用有参的构造方法，并赋予默认值 重写、重载和覆盖 重写是子类和父类之间，子类有一个与父类完全相同的方法声明，优先调用子类的方法 重载是同一类中，方法名相同，参数列表不同 覆盖和重写是一个意思 函数 Math.abs():取绝..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222181902.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-11T08:51:19.000Z"}],["meta",{"property":"article:tag","content":"这下不得不学了吧"}],["meta",{"property":"article:tag","content":"投机取巧"}],["meta",{"property":"article:tag","content":"现在立刻停止重新造轮子"}],["meta",{"property":"article:published_time","content":"2024-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-11T08:51:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应试JAVA\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222181902.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/c9312309123.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/IHASDwdwd6.png\\"],\\"datePublished\\":\\"2024-12-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-11T08:51:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":2,"title":"一、常用快捷键","slug":"一、常用快捷键","link":"#一、常用快捷键","children":[{"level":3,"title":"1、代码注释快捷键","slug":"_1、代码注释快捷键","link":"#_1、代码注释快捷键","children":[]},{"level":3,"title":"2、代码格式化快捷键","slug":"_2、代码格式化快捷键","link":"#_2、代码格式化快捷键","children":[]},{"level":3,"title":"3、代码自动提示快捷键","slug":"_3、代码自动提示快捷键","link":"#_3、代码自动提示快捷键","children":[]},{"level":3,"title":"4、快速修正快捷键","slug":"_4、快速修正快捷键","link":"#_4、快速修正快捷键","children":[]},{"level":3,"title":"5、编辑快捷键","slug":"_5、编辑快捷键","link":"#_5、编辑快捷键","children":[]},{"level":3,"title":"6、查看和定位快捷键","slug":"_6、查看和定位快捷键","link":"#_6、查看和定位快捷键","children":[]},{"level":3,"title":"7、调试快捷键","slug":"_7、调试快捷键","link":"#_7、调试快捷键","children":[]}]},{"level":2,"title":"二、常用设置","slug":"二、常用设置","link":"#二、常用设置","children":[{"level":3,"title":"1、设置Workspace中文件编码","slug":"_1、设置workspace中文件编码","link":"#_1、设置workspace中文件编码","children":[]},{"level":3,"title":"2、代码自动提示","slug":"_2、代码自动提示","link":"#_2、代码自动提示","children":[]},{"level":3,"title":"3、设置JSP文件编码","slug":"_3、设置jsp文件编码","link":"#_3、设置jsp文件编码","children":[]},{"level":3,"title":"4、如何在Eclipse中调整package的上下顺序","slug":"_4、如何在eclipse中调整package的上下顺序","link":"#_4、如何在eclipse中调整package的上下顺序","children":[]}]}],"git":{"createdTime":1736683443000,"updatedTime":1746953479000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":616,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":8.01,"words":2402},"filePathRelative":"article/04_归档/考试周破防/应试JAVA.md","localizedDate":"2024年12月15日","excerpt":"<p>选择10，判断，程序填空，编程2，类与对象，数组，分离数字</p>\\n<p>this:<br>\\n表示当前对象<br>\\n调用本类的其他构造方法：this(实参)，调用有参的构造方法，并赋予默认值</p>\\n<h1>重写、重载和覆盖</h1>\\n<ul>\\n<li>\\n<p>重写是子类和父类之间，子类有一个与父类完全相同的方法声明，优先调用子类的方法</p>\\n</li>\\n<li>\\n<p>重载是同一类中，方法名相同，参数列表不同</p>\\n</li>\\n<li>\\n<p>覆盖和重写是一个意思</p>\\n</li>\\n</ul>\\n<h1>函数</h1>\\n<ul>\\n<li>\\n<p>Math.abs():取绝对值</p>\\n</li>\\n<li>\\n<p>.equals():比较两个字符串是否相等</p>\\n</li>\\n<li>\\n<p>str.substring(0, 3):提取前3个字符串，与python不同的是这个方法不会包括第3（也就是第四个字符）数学表达：<code>[0,3)</code></p>\\n</li>\\n<li>\\n<p>str.charAt(int index):访问单独的字符，hh幽默</p>\\n</li>\\n<li>\\n<p>math.random()  一般乘10的倍数并用(int)强转接当随机数使用</p>\\n<ul>\\n<li><strong>返回值</strong>：<code>Math.random()</code>&nbsp;返回一个大于等于 0 且小于 1 的浮点数。</li>\\n<li><strong>无参数</strong>：不需要传入任何参数。</li>\\n</ul>\\n</li>\\n<li>\\n<p>可以用integer.parseTnt(\\"3\\"):将字符串3转为数字int类型3</p>\\n</li>\\n<li>\\n<p>super.方法会执行父类的当前方法，然后执行子类的本方法</p>\\n</li>\\n<li>\\n<p>String方法把数组转化成字符串</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
