import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as t,o as a}from"./app--YVPk-rV.js";const n={};function r(p,e){return a(),i("div",null,e[0]||(e[0]=[t(`<p>5,050 users solved</p><h4 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h4><p>Can you figure out what is in the <code>eax</code> register? Put your answer in the picoCTF flag format: <code>picoCTF{n}</code> where <code>n</code> is the contents of the <code>eax</code> register in the decimal number base. If the answer was <code>0x11</code> your flag would be <code>picoCTF{17}</code>.Download the assembly dump <a href="https://artifacts.picoctf.net/c/511/disassembler-dump0_d.txt" target="_blank" rel="noopener noreferrer">here</a>.</p><h4 id="hints" tabindex="-1"><a class="header-anchor" href="#hints"><span>Hints</span></a></h4><ul><li>Don&#39;t tell anyone I told you this, but you can solve this problem without understanding the compare/jump relationship.</li><li>Of course, if you&#39;re really good, you&#39;ll only need one attempt to solve this problem.</li></ul><hr><h1 id="_01-解题过程" tabindex="-1"><a class="header-anchor" href="#_01-解题过程"><span>01. 解题过程</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+0&gt;:     endbr64 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+4&gt;:     push   rbp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+5&gt;:     mov    rbp,rsp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+8&gt;:     mov    DWORD PTR [rbp-0x14],edi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+11&gt;:    mov    QWORD PTR [rbp-0x20],rsi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+15&gt;:    mov    DWORD PTR [rbp-0x4],0x9fe1a ;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">654,874</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+22&gt;:    cmp    DWORD PTR [rbp-0x4],0x2710 ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">654,874</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">10,000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+29&gt;:    jle    0x55555555514e &lt;main+37&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+31&gt;:    sub    DWORD PTR [rbp-0x4],0x65 ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FDB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">5&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">654,773</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+35&gt;:    jmp    0x555555555152 &lt;main+41&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+37&gt;:    add    DWORD PTR [rbp-0x4],0x65</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+41&gt;:    mov    eax,DWORD PTR [rbp-0x4]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+44&gt;:    pop    rbp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;+45&gt;:    ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解题过程在注释里，不难啊这题，cmp，具体知识点在汇编手册里</p>`,9)]))}const h=s(n,[["render",r],["__file","Bit-O-Asm-4.html.vue"]]),d=JSON.parse('{"path":"/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/Bit-O-Asm-4.html","title":"Bit-O-Asm-4","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-15T00:00:00.000Z","tags":null,"title":"Bit-O-Asm-4","category":["领域"],"description":"5,050 users solved Description Can you figure out what is in the eax register? Put your answer in the picoCTF flag format: picoCTF{n} where n is the contents of the eax register...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/Bit-O-Asm-4.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"Bit-O-Asm-4"}],["meta",{"property":"og:description","content":"5,050 users solved Description Can you figure out what is in the eax register? Put your answer in the picoCTF flag format: picoCTF{n} where n is the contents of the eax register..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-23T05:23:17.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-23T05:23:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bit-O-Asm-4\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-23T05:23:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1736949414000,"updatedTime":1742707397000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":410,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":0.76,"words":227},"filePathRelative":"article/02_领域/picoCTF/逆向 reverse/Bit-O-Asm-4.md","localizedDate":"2025年1月15日","excerpt":"<p>5,050&nbsp;users solved</p>\\n<h4>Description</h4>\\n<p>Can you figure out what is in the&nbsp;<code>eax</code>&nbsp;register? Put your answer in the picoCTF flag format:&nbsp;<code>picoCTF{n}</code>&nbsp;where&nbsp;<code>n</code>&nbsp;is the contents of the&nbsp;<code>eax</code>&nbsp;register in the decimal number base. If the answer was&nbsp;<code>0x11</code>&nbsp;your flag would be&nbsp;<code>picoCTF{17}</code>.Download the assembly dump&nbsp;<a href=\\"https://artifacts.picoctf.net/c/511/disassembler-dump0_d.txt\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">here</a>.</p>","autoDesc":true}');export{h as comp,d as data};
