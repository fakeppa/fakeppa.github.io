import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-B0xd6qnq.js";const l={};function t(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_01-模版构建与环境搭建" tabindex="-1"><a class="header-anchor" href="#_01-模版构建与环境搭建"><span>01. 模版构建与环境搭建</span></a></h1><p>首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemProp.http.proxyHost=127.0.0.1</span></span>
<span class="line"><span>systemProp.http.proxyPort=10809</span></span>
<span class="line"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>systemProp.https.proxyHost=127.0.0.1</span></span>
<span class="line"><span>systemProp.https.proxyPort=10809</span></span>
<span class="line"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理</p><h1 id="_02-入口点和初始化器" tabindex="-1"><a class="header-anchor" href="#_02-入口点和初始化器"><span>02. 入口点和初始化器</span></a></h1><p>Fabric Load用fabric.mod.json来检测和加载你的模组，一个模组通常包含至少一个初始化器类<br> 初始化器至少实现了这个类应该实现了 <code>ModInitializer</code>、<code>ClientModInitializer</code> 和 <code>DedicatedServerModInitializer</code> 这三个接口中的一个。这三个接口都在net.fabricmc.api包内。<br> 在三个接口中必须具体实现<code>onInitialize()</code>的抽象方法。（对于 Client 是 <code>onInitializeClient()</code>，对于 Server 是 <code>onInitializeServer()</code>）</p><h1 id="_03-创建你的工程" tabindex="-1"><a class="header-anchor" href="#_03-创建你的工程"><span>03. 创建你的工程</span></a></h1><h2 id="_001-目录结构" tabindex="-1"><a class="header-anchor" href="#_001-目录结构"><span>001. 目录结构</span></a></h2><p>src\\main\\java\\你的包名\\你的模组名.java<br> 在包名这里需要展示出你的从包名到上一级目录的内容，假如我的文件结构为com\\example\\文件.java<br> 那么在文件里就该这么声明包</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em>在我们的模组主程序中，就可以进行模组的编写</em></p><h2 id="_002-入口点的设置" tabindex="-1"><a class="header-anchor" href="#_002-入口点的设置"><span>002. 入口点的设置</span></a></h2><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;schemaVersion&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tl_ppie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${version}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Triple Layer Pumpkin Pie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;you can eat Triple Layer Pumpkin Pie!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;authors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;fakeppa&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;contact&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;homepage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://fakeppa.github.io/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;sources&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://github.com/FabricMC/fabric-example-mod&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来看这些，id填写模组的命名空间(只能填写_和阿拉伯数字以及小写字母)，name为你的模组的名称，然后添加描述和作者，然后添加联系方式</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;license&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CC0-1.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;icon&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;assets/modid/icon.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;environment&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;entrypoints&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;com.example.ExampleMod&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;client&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;com.example.ExampleModClient&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>icon：具体的图标资源地址</li><li>&quot;main&quot;：包名，最后一个是类名</li><li>&quot;client&quot;：客户端加载的内容，先不管</li></ul><p><em>其他内容待续，暂时只用到这些</em></p><h1 id="_04-创建一个物品" tabindex="-1"><a class="header-anchor" href="#_04-创建一个物品"><span>04. 创建一个物品</span></a></h1><p><em>现在开始实践，制作一个普通的物品，这些代码需要在入口点指定的main字段添加</em></p><h2 id="_001-实例化物品" tabindex="-1"><a class="header-anchor" href="#_001-实例化物品"><span>001. 实例化物品</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Item</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CUSTOM_ITEM </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Item</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FabricItemSettings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>CUSTOM_ITEM:你实例化物品的名称，也就是一个Item类的对象，<em>其他的参数暂时不看</em></li></ul><h2 id="_002-注册表" tabindex="-1"><a class="header-anchor" href="#_002-注册表"><span>002. 注册表（）</span></a></h2><p>注册内容时，需要指定加入那个注册表，基本的游戏提供所有原版内容的注册表</p><h3 id="_0001-添加内容到注册表" tabindex="-1"><a class="header-anchor" href="#_0001-添加内容到注册表"><span>0001. 添加内容到注册表</span></a></h3><p><strong>注册代码要在<code>public void onInitialize()</code>抽象方法（初始化器）内具体实现</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registry.register(registry,id,conten);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>registry: 你的物品要添加到的那个注册表的对象</li><li>id：你的内容在注册表中的id<br><strong>关于id</strong><br> 使用<code>new Identifier(&quot;namespace&quot;, &quot;path&quot;)</code>来添加id <ul><li>namespace：是我们在入口点定义的modid</li><li>path：</li></ul></li><li>content：你需要注册的内容的对象。（也就是上文的CUSTOM_ITEM对象）</li></ul>`,28)]))}const d=i(l,[["render",t],["__file","MCmod开发.html.vue"]]),o=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/MCmod%E5%BC%80%E5%8F%91.html","title":"MCmod开发","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-04T00:00:00.000Z","tags":null,"title":"MCmod开发","category":["项目"],"description":"01. 模版构建与环境搭建 首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖 在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理 02. 入口点和初始化器 Fabric Load用fabric.mod.json来...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/MCmod%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"MCmod开发"}],["meta",{"property":"og:description","content":"01. 模版构建与环境搭建 首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖 在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理 02. 入口点和初始化器 Fabric Load用fabric.mod.json来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-05T08:40:44.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-05T08:40:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MCmod开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-05T08:40:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"001. 目录结构","slug":"_001-目录结构","link":"#_001-目录结构","children":[]},{"level":2,"title":"002. 入口点的设置","slug":"_002-入口点的设置","link":"#_002-入口点的设置","children":[]},{"level":2,"title":"001. 实例化物品","slug":"_001-实例化物品","link":"#_001-实例化物品","children":[]},{"level":2,"title":"002. 注册表（）","slug":"_002-注册表","link":"#_002-注册表","children":[{"level":3,"title":"0001. 添加内容到注册表","slug":"_0001-添加内容到注册表","link":"#_0001-添加内容到注册表","children":[]}]}],"git":{"createdTime":1735965617000,"updatedTime":1736066444000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":26,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":2.36,"words":708},"filePathRelative":"article/01_项目/MCmod开发.md","localizedDate":"2025年1月4日","excerpt":"\\n<p>首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>systemProp.http.proxyHost=127.0.0.1</span></span>\\n<span class=\\"line\\"><span>systemProp.http.proxyPort=10809</span></span>\\n<span class=\\"line\\"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>systemProp.https.proxyHost=127.0.0.1</span></span>\\n<span class=\\"line\\"><span>systemProp.https.proxyPort=10809</span></span>\\n<span class=\\"line\\"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
