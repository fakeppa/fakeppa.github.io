import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as l,o as a}from"./app-BtEewoYP.js";const o={};function i(p,e){return a(),t("div",null,e[0]||(e[0]=[l('<h2 id="tea算法" tabindex="-1"><a class="header-anchor" href="#tea算法"><span>TEA算法</span></a></h2><h3 id="一、核心计算要素" tabindex="-1"><a class="header-anchor" href="#一、核心计算要素"><span>一、核心计算要素</span></a></h3><h4 id="_1-输入参数" tabindex="-1"><a class="header-anchor" href="#_1-输入参数"><span>1. 输入参数</span></a></h4><ul><li><p>​<strong>​明文数据​</strong>​：64位（8字节）数据块</p><ul><li><p>分为两个32位字：<code>v0</code>和 <code>v1</code></p></li><li><p>示例：<code>unsigned long EntryData[2] = {v0, v1};</code></p></li></ul></li><li><p>​<strong>​密钥​</strong>​：128位（16字节）密钥</p><ul><li><p>分为四个32位字：<code>k0, k1, k2, k3</code></p></li><li><p>示例：<code>unsigned long Key[4] = {k0, k1, k2, k3};</code></p></li></ul></li><li><p>​<strong>​轮数​</strong>​：固定32轮（标准实现）</p></li></ul><h4 id="_2-输出结果" tabindex="-1"><a class="header-anchor" href="#_2-输出结果"><span>2. 输出结果</span></a></h4><ul><li><p>​<strong>​密文数据​</strong>​：64位加密结果</p><ul><li><p>同样存储为两个32位字：<code>v0&#39;</code>和 <code>v1&#39;</code></p></li><li><p>示例：<code>EntryData[0] = v0&#39;, EntryData[1] = v1&#39;</code></p></li></ul></li></ul><h4 id="_3-核心常量" tabindex="-1"><a class="header-anchor" href="#_3-核心常量"><span>3. 核心常量</span></a></h4><ul><li><p>​<strong>​Delta (δ)​</strong>​：<code>0x9E3779B9</code></p><ul><li><p>黄金分割常数（2³²/φ，φ≈1.618）</p></li><li><p>数学意义：<code>⌊2³² × (√5-1)/2⌋</code></p></li></ul></li></ul>',8)]))}const c=n(o,[["render",i],["__file","RE需要的各种加密.html.vue"]]),d=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/RE%E9%9C%80%E8%A6%81%E7%9A%84%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86.html","title":"RE需要的各种加密","lang":"zh-CN","frontmatter":{"aliases":null,"tags":null,"cssclasses":null,"icon":"pen-to-square","date":"2025-09-18T00:00:00.000Z","title":"RE需要的各种加密","description":"TEA算法 一、核心计算要素 1. 输入参数 ​​明文数据​​：64位（8字节）数据块 分为两个32位字：v0和 v1 示例：unsigned long EntryData[2] = {v0, v1}; ​​密钥​​：128位（16字节）密钥 分为四个32位字：k0, k1, k2, k3 示例：unsigned long Key[4] = {k0, ...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/RE%E9%9C%80%E8%A6%81%E7%9A%84%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"RE需要的各种加密"}],["meta",{"property":"og:description","content":"TEA算法 一、核心计算要素 1. 输入参数 ​​明文数据​​：64位（8字节）数据块 分为两个32位字：v0和 v1 示例：unsigned long EntryData[2] = {v0, v1}; ​​密钥​​：128位（16字节）密钥 分为四个32位字：k0, k1, k2, k3 示例：unsigned long Key[4] = {k0, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-09-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RE需要的各种加密\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"TEA算法","slug":"tea算法","link":"#tea算法","children":[{"level":3,"title":"一、核心计算要素","slug":"一、核心计算要素","link":"#一、核心计算要素","children":[]}]}],"git":{},"readingTime":{"minutes":0.55,"words":166},"filePathRelative":"article/01_项目/RE需要的各种加密.md","localizedDate":"2025年9月18日","excerpt":"<h2>TEA算法</h2>\\n<h3>一、核心计算要素</h3>\\n<h4>1. 输入参数</h4>\\n<ul>\\n<li>\\n<p>​<strong>​明文数据​</strong>​：64位（8字节）数据块</p>\\n<ul>\\n<li>\\n<p>分为两个32位字：<code>v0</code>和&nbsp;<code>v1</code></p>\\n</li>\\n<li>\\n<p>示例：<code>unsigned long EntryData[2] = {v0, v1};</code></p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>​<strong>​密钥​</strong>​：128位（16字节）密钥</p>\\n<ul>\\n<li>\\n<p>分为四个32位字：<code>k0, k1, k2, k3</code></p>\\n</li>\\n<li>\\n<p>示例：<code>unsigned long Key[4] = {k0, k1, k2, k3};</code></p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>​<strong>​轮数​</strong>​：固定32轮（标准实现）</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,d as data};
