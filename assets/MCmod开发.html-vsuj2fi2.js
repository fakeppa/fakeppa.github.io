import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-DEQu9meo.js";const l={};function t(d,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_01-模版构建与环境搭建" tabindex="-1"><a class="header-anchor" href="#_01-模版构建与环境搭建"><span>01. 模版构建与环境搭建</span></a></h1><p>首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemProp.http.proxyHost=127.0.0.1</span></span>
<span class="line"><span>systemProp.http.proxyPort=10809</span></span>
<span class="line"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>systemProp.https.proxyHost=127.0.0.1</span></span>
<span class="line"><span>systemProp.https.proxyPort=10809</span></span>
<span class="line"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理</p><h1 id="_02-入口点和初始化器" tabindex="-1"><a class="header-anchor" href="#_02-入口点和初始化器"><span>02. 入口点和初始化器</span></a></h1><p>Fabric Load用fabric.mod.json来检测和加载你的模组，一个模组通常包含至少一个初始化器类<br> 初始化器至少实现了这个类应该实现了 <code>ModInitializer</code>、<code>ClientModInitializer</code> 和 <code>DedicatedServerModInitializer</code> 这三个接口中的一个。这三个接口都在net.fabricmc.api包内。<br> 在三个接口中必须具体实现<code>onInitialize()</code>的抽象方法。（对于 Client 是 <code>onInitializeClient()</code>，对于 Server 是 <code>onInitializeServer()</code>）</p><h1 id="_03-创建你的工程" tabindex="-1"><a class="header-anchor" href="#_03-创建你的工程"><span>03. 创建你的工程</span></a></h1><h2 id="_001-目录结构" tabindex="-1"><a class="header-anchor" href="#_001-目录结构"><span>001. 目录结构</span></a></h2><p>src\\main\\java\\你的包名\\你的模组名.java<br> 在包名这里需要展示出你的从包名到上一级目录的内容，假如我的文件结构为com\\example\\文件.java<br> 那么在文件里就该这么声明包</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em>在我们的模组主程序中，就可以进行模组的编写</em></p><h2 id="_002-入口点的设置" tabindex="-1"><a class="header-anchor" href="#_002-入口点的设置"><span>002. 入口点的设置</span></a></h2><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;schemaVersion&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tl_ppie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${version}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Triple Layer Pumpkin Pie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;you can eat Triple Layer Pumpkin Pie!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;authors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;fakeppa&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;contact&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;homepage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://fakeppa.github.io/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;sources&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://github.com/FabricMC/fabric-example-mod&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来看这些，id填写模组的命名空间(只能填写_和阿拉伯数字以及小写字母)，name为你的模组的名称，然后添加描述和作者，然后添加</p><h1 id="_04-注册一个物品" tabindex="-1"><a class="header-anchor" href="#_04-注册一个物品"><span>04. 注册一个物品</span></a></h1><h2 id="_001-注册表" tabindex="-1"><a class="header-anchor" href="#_001-注册表"><span>001. 注册表</span></a></h2><p>注册内容时，需要指定加入那个注册表，基本的游戏提供所有原版内容的注册表</p><h3 id="_0001-注册你的内容" tabindex="-1"><a class="header-anchor" href="#_0001-注册你的内容"><span>0001. 注册你的内容</span></a></h3><p>使用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registry.register(registry,id,content);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注册物品</p><ul><li><strong>registry</strong> - 你需要添加内容进的注册表的实例。</li><li><strong>id</strong> - 你的内容在注册表内的 ID。</li><li><strong>content</strong> - 你需要注册的内容的实例。</li></ul><h3 id="_0002-通过-id-获取对象" tabindex="-1"><a class="header-anchor" href="#_0002-通过-id-获取对象"><span>0002. 通过 ID 获取对象</span></a></h3><p>get返回注册表内与ID关联的内容。如果内容不存在，SimpleDefaultedRegistry会返回默认注册表，而<code>SimpleRegistry</code> 就返回 null。可以使用 <code>containsId</code> 或 <code>getOrEmpty</code> 方法检测 ID 是否存在</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registries.ITEM.containsId(Identifier.ofVanilla(&quot;diamond&quot;)); // 返回 true</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>Registries.ITEM.containsId(Identifier.ofVanilla(&quot;invalid_name&quot;)); // 返回 false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Registries.ITEM</strong>：这是 Minecraft 中用于注册和管理物品的注册表。它是一个 <code>Registry&lt;Item&gt;</code> 类型的对象，包含了游戏中所有注册的物品.</li><li><strong>Identifier.ofVanilla(&quot;diamond&quot;)</strong>：创建一个指向原版 Minecraft 中的物品的标识符。<code>&quot;diamond&quot;</code> 是原版 Minecraft 中钻石物品的路径，其完整的标识符是 <code>&quot;minecraft:diamond&quot;</code>.</li><li><strong>containsId</strong>：这是 <code>Registry</code> 接口的一个方法，用于检查注册表中是否包含指定的标识符。如果注册表中存在该标识符对应的物品，则返回 <code>true</code>；否则返回 <code>false</code>.</li><li><strong>返回 true</strong>：因为原版 Minecraft 中确实存在名为 <code>&quot;minecraft:diamond&quot;</code> 的物品（钻石），所以这行代码返回 <code>true</code>，表示物品注册表中包含这个标识符.</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registries.ITEM.get(Identifier.ofVanilla(&quot;diamond&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>Registries.ITEM.get</code> 方法</strong>：用于从物品注册表中获取与指定标识符关联的物品实例。</li><li><strong><code>Identifier.ofVanilla(&quot;diamond&quot;)</code></strong>：创建一个指向原版 Minecraft 中的物品的标识符，即 <code>&quot;minecraft:diamond&quot;</code>。</li><li><strong>返回 <code>Items.DIAMOND</code></strong>：因为原版 Minecraft 中存在名为 <code>&quot;minecraft:diamond&quot;</code> 的物品（钻石），所以这行代码返回 <code>Items.DIAMOND</code>，即钻石物品的实例。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registries.ITEM.get(Identifier.ofVanilla(&quot;invalid_name&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>返回 <code>Items.AIR</code></strong>：当尝试获取一个不存在的标识符时，<code>SimpleDefaultedRegistry</code> 返回注册表的默认值。在物品注册表中，默认值通常是 <code>Items.AIR</code>，表示空气物品。因此，这行代码返回 <code>Items.AIR</code>。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registries.ITEM.getOrEmpty(Identifier.ofVanilla(&quot;diamond&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>getOrEmpty</code> 方法</strong>：用于从注册表中获取与指定标识符关联的实例，返回一个 <code>Optional</code> 对象。</li><li><strong>返回 <code>Optional.of(Items.DIAMOND)</code></strong>：因为 <code>&quot;minecraft:diamond&quot;</code> 存在，所以返回一个包含 <code>Items.DIAMOND</code> 的 <code>Optional</code> 对象。<code>Optional.of</code> 表示找到了有效的实例。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Registries.ITEM.getOrEmpty(Identifier.ofVanilla(&quot;invalid_name&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>返回 <code>Optional.empty()</code></strong>：当尝试获取一个不存在的标识符时，<code>getOrEmpty</code> 方法返回一个空的 <code>Optional</code> 对象。<code>Optional.empty()</code> 表示没有找到对应的实例。</li></ul><h3 id="_0003-获取对象的-id" tabindex="-1"><a class="header-anchor" href="#_0003-获取对象的-id"><span>0003. 获取对象的 ID</span></a></h3><p><code>getId</code> 返回注册表内与对象关联的 <code>Identifier</code>，如果这个项不存在， <code>SimpleDefaultedRegistry</code> 返回默认的注册表 ID，<code>SimpleRegistry</code> 返回 null。例如：</p><pre><code>Registries.BLOCK.getId(Blocks.STONE);  // 返回 Identifier.ofVanilla(&quot;stone&quot;))
</code></pre><h2 id="_002-添加物品" tabindex="-1"><a class="header-anchor" href="#_002-添加物品"><span>002. 添加物品</span></a></h2><h3 id="_0001-创建物品" tabindex="-1"><a class="header-anchor" href="#_0001-创建物品"><span>0001. 创建物品</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExampleMod</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ModInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建一个自定义食物物品</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Item</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CUSTOM_FOOD </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ItemFood</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FabricItemSettings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置最大堆叠数为1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 恢复4点饥饿值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        14.4f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 饱和度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 是否可以堆叠</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MobEffectInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]{} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 没有食用效果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    )</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.....</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">其它代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个简单的食物创建代码，不包括导包</p><h3 id="_0002-注册这个物品" tabindex="-1"><a class="header-anchor" href="#_0002-注册这个物品"><span>0002. 注册这个物品</span></a></h3>`,42)]))}const h=s(l,[["render",t],["__file","MCmod开发.html.vue"]]),o=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/MCmod%E5%BC%80%E5%8F%91.html","title":"MCmod开发","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-04T00:00:00.000Z","tags":null,"title":"MCmod开发","category":["项目"],"description":"01. 模版构建与环境搭建 首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖 在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理 02. 入口点和初始化器 Fabric Load用fabric.mod.json来...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/MCmod%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"MCmod开发"}],["meta",{"property":"og:description","content":"01. 模版构建与环境搭建 首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖 在系统的.gradle文件加内创建gradle.properties文件，填写以上内容，这样在系统范围内都会走代理 02. 入口点和初始化器 Fabric Load用fabric.mod.json来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-05T07:50:02.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-05T07:50:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MCmod开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-05T07:50:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"001. 目录结构","slug":"_001-目录结构","link":"#_001-目录结构","children":[]},{"level":2,"title":"002. 入口点的设置","slug":"_002-入口点的设置","link":"#_002-入口点的设置","children":[]},{"level":2,"title":"001. 注册表","slug":"_001-注册表","link":"#_001-注册表","children":[{"level":3,"title":"0001. 注册你的内容","slug":"_0001-注册你的内容","link":"#_0001-注册你的内容","children":[]},{"level":3,"title":"0002. 通过 ID 获取对象","slug":"_0002-通过-id-获取对象","link":"#_0002-通过-id-获取对象","children":[]},{"level":3,"title":"0003. 获取对象的 ID","slug":"_0003-获取对象的-id","link":"#_0003-获取对象的-id","children":[]}]},{"level":2,"title":"002. 添加物品","slug":"_002-添加物品","link":"#_002-添加物品","children":[{"level":3,"title":"0001. 创建物品","slug":"_0001-创建物品","link":"#_0001-创建物品","children":[]},{"level":3,"title":"0002. 注册这个物品","slug":"_0002-注册这个物品","link":"#_0002-注册这个物品","children":[]}]}],"git":{"createdTime":1735965617000,"updatedTime":1736063402000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":20,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":4,"words":1200},"filePathRelative":"article/01_项目/MCmod开发.md","localizedDate":"2025年1月4日","excerpt":"\\n<p>首先在fbric官网进行模版模组的拉取，随后在vscode中进行打开，然后配置gradle代理，才能正确处理gradle的依赖</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>systemProp.http.proxyHost=127.0.0.1</span></span>\\n<span class=\\"line\\"><span>systemProp.http.proxyPort=10809</span></span>\\n<span class=\\"line\\"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>systemProp.https.proxyHost=127.0.0.1</span></span>\\n<span class=\\"line\\"><span>systemProp.https.proxyPort=10809</span></span>\\n<span class=\\"line\\"><span>systemProp.https.nonProxyHosts=10.*|localhost</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,o as data};
