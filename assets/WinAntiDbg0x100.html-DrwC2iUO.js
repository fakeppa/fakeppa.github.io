import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as n}from"./app-B6SGcykQ.js";const t={};function l(p,i){return n(),e("div",null,i[0]||(i[0]=[a(`<p><em>段位还是不够 :&lt;</em>,<br> I can do this<br> Author: Nandan Desai</p><h4 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h4><p>This challenge will introduce you to &#39;Anti-Debugging.&#39; Malware developers don&#39;t like it when you attempt to debug their executable files because debugging these files reveals many of their secrets! That&#39;s why, they include a lot of code logic specifically designed to interfere with your debugging process.Now that you&#39;ve understood the context, go ahead and debug this Windows executable!This challenge binary file is a Windows console application and you can start with running it using on Windows.<code>cmd</code>Challenge can be downloaded <a href="https://artifacts.picoctf.net/c_titan/55/WinAntiDbg0x100.zip" target="_blank" rel="noopener noreferrer">here</a>. Unzip the archive with the password <code>picoctf</code></p><h4 id="hints" tabindex="-1"><a class="header-anchor" href="#hints"><span>Hints</span></a></h4><p>Hints will be displayed to the Debug console. Good luck!</p><hr><h1 id="_00-前言" tabindex="-1"><a class="header-anchor" href="#_00-前言"><span>00. 前言</span></a></h1><p><em>第一次接触逆向，这是前所未有的挑战</em></p><h1 id="_01-解题过程" tabindex="-1"><a class="header-anchor" href="#_01-解题过程"><span>01. 解题过程</span></a></h1><p>尝试运行给定文件<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222133402.png" alt="image.png" loading="lazy"><br> 提示我们用debugger打开<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222133650.png" alt="image.png" loading="lazy"><br> 在互联网上看到的应用，先下载这个调试工具试试<br> 拖到debug中发现这些都是32位寄存器<br><em>32位寄存器通常由E开头，64位由R开头</em></p><p>利用调试器进行逐步分析，可以看到输出了log日志<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222140047.png" alt="image.png" loading="lazy"><br> 意思是检测到我们正在使用debugger了，我们需要绕过检查,然后用ghidra查看反编译代码，然后在<code>FUN_00401580</code>发现了关键的逻辑</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      BVar3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IsDebuggerPresent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (BVar3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        FUN_00401440</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        FUN_00401530</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DAT_00405404);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        lpOutputString </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FUN_004013b0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DAT_00405408);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lpOutputString </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (LPWSTR)</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;### Something went wrong...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;### Good job! Here</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s your flag:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;### ~~~ &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lpOutputString);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          OutputDebugStringW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if (BVar3 == 0)</code>在汇编中对应的语句是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        00401602 85  c0           TEST       EAX ,EAX</span></span>
<span class="line"><span>        00401604 74  15           JZ         LAB_0040161b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们记住这个地址<code>1602</code>然后在x32debugger对这个地址打断点<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173520.png" alt="image.png" loading="lazy"><br> 运行知道这个断点<br> 然后更改寄存器的值1变为0<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173551.png" alt="image.png" loading="lazy"><br> 继续运行，在随后的比较中会更新寄存器标志位，然后进行跳转等操作，在日志中可以查看flag<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173707.png" alt="image.png" loading="lazy"></p><p>flag</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>picoCTF{d3bug_f0r_th3_Win_0x100_cfbacfab}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,17)]))}const d=s(t,[["render",l],["__file","WinAntiDbg0x100.html.vue"]]),g=JSON.parse(`{"path":"/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/WinAntiDbg0x100.html","title":"WinAntiDbg0x100","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-22T00:00:00.000Z","tags":null,"title":"WinAntiDbg0x100","category":["领域"],"description":"段位还是不够 :<, I can do this Author: Nandan Desai Description This challenge will introduce you to 'Anti-Debugging.' Malware developers don't like it when you attempt to debug their...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/picoCTF/%E9%80%86%E5%90%91%20reverse/WinAntiDbg0x100.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"WinAntiDbg0x100"}],["meta",{"property":"og:description","content":"段位还是不够 :<, I can do this Author: Nandan Desai Description This challenge will introduce you to 'Anti-Debugging.' Malware developers don't like it when you attempt to debug their..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222133402.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-19T07:10:23.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-19T07:10:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WinAntiDbg0x100\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222133402.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222133650.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241222140047.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173520.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173551.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250121173707.png\\"],\\"datePublished\\":\\"2024-12-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-19T07:10:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1737706909000,"updatedTime":1742368223000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":275,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"article/02_领域/picoCTF/逆向 reverse/WinAntiDbg0x100.md","localizedDate":"2024年12月22日","excerpt":"<p><em>段位还是不够 :&lt;</em>,<br>\\nI can do this<br>\\nAuthor:&nbsp;Nandan Desai</p>\\n<h4>Description</h4>\\n<p>This challenge will introduce you to 'Anti-Debugging.' Malware developers don't like it when you attempt to debug their executable files because debugging these files reveals many of their secrets! That's why, they include a lot of code logic specifically designed to interfere with your debugging process.Now that you've understood the context, go ahead and debug this Windows executable!This challenge binary file is a Windows console application and you can start with running it using&nbsp;on Windows.<code>cmd</code>Challenge can be downloaded&nbsp;<a href=\\"https://artifacts.picoctf.net/c_titan/55/WinAntiDbg0x100.zip\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">here</a>. Unzip the archive with the password&nbsp;<code>picoctf</code></p>","autoDesc":true}`);export{d as comp,g as data};
