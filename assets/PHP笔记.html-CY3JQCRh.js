import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,o as t}from"./app-CFIPuIjI.js";const n={};function l(o,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_1-写在前面" tabindex="-1"><a class="header-anchor" href="#_1-写在前面"><span>1. 写在前面</span></a></h1><p><strong>通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，《项目驱动》，可以这么说吧</strong></p><h1 id="_2-注释符" tabindex="-1"><a class="header-anchor" href="#_2-注释符"><span>2. 注释符</span></a></h1><p><code>//</code></p><h1 id="_3-post" tabindex="-1"><a class="header-anchor" href="#_3-post"><span>3. POST</span></a></h1><p><strong>超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以<code>$_POST</code>的形式检索或引用其中的数据</strong></p><ul><li>例如</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Array</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    [user] =&gt; 用户输入的用户名</span></span>
<span class="line"><span>    [pass] =&gt; 用户输入的密码</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示<br><code>&lt;form method=&quot;post&quot; action=&quot;submit.php&quot;&gt; 内容 &lt;/form&gt;</code></p></li><li><p>在html中通常以<code>&lt;input type=&quot;text&quot; id=&quot;user&quot; name=&quot;user&quot;&gt;</code>中的name来定义POST中键的内容</p></li><li><p>常用这样的形式进行判断<code>if (isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;]))</code>可以判断user和pass键是否为空</p></li><li><p>用<code>$username = $_POST[&quot;user&quot;];</code>的方式提取POST内容</p><ul><li><code>$_POST[&quot; 键 &quot;]</code>:来检索键的内容,并赋值给username</li></ul></li></ul><h1 id="_3-对象" tabindex="-1"><a class="header-anchor" href="#_3-对象"><span>3. 对象</span></a></h1><p><strong>用<code>$con = new SQLite3(&quot;../users.db&quot;);</code>类似于这样的形式创建一个SQLite3的对象</strong></p><ul><li>调用对象的方法<br><code>$con-&gt;query(...)</code>：调用$con的query方法,(...)内填写参数，例如这个可以填写sql语句</li></ul><h1 id="_4-函数" tabindex="-1"><a class="header-anchor" href="#_4-函数"><span>4. 函数</span></a></h1><h3 id="_4x01" tabindex="-1"><a class="header-anchor" href="#_4x01"><span>4x01.</span></a></h3><p>一个简单的建立cookie的PHP代码</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">setcookie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> urlencode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">base64_encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">serialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$perm_res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))),</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">86400</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>setcookie(...)</code></strong>：这是 PHP 的一个内置函数，用于设置 HTTP cookie。</li></ul><ol><li><strong><code>time() + (86400 * 30)</code></strong>：这是<code>setcookie(...)</code>的一个参数，用于设置 cookie 的过期时间。<code>time()</code> 函数返回当前的 Unix 时间戳（自 1970 年 1 月 1 日以来的秒数）。<code>86400</code> 是一天的秒数（24小时 × 60分钟 × 60秒），因此 <code>86400 * 30</code> 表示 30 天的秒数。将当前时间戳加上 30 天的秒数，得到 cookie 的过期时间。</li><li><strong><code>&quot;/&quot;</code></strong>：这是<code>setcookie(...)</code>的一个参数,用于设置cookie 的路径，表示该 cookie 在整个网站上都有效。</li></ol><ul><li><p><strong><code>&quot;login&quot;</code></strong>：这是 cookie 的名称。在这里，cookie 被命名为 <code>login</code>。</p></li><li><p><strong><code>urlencode(...)</code></strong>：这是一个函数，用于对字符串进行 URL 编码，以确保在 URL 中安全传输。它会对特殊字符进行编码。</p></li><li><p><strong><code>base64_encode(...)</code></strong>：这是一个函数，用于将数据进行 Base64 编码。Base64 编码可以将二进制数据转换为 ASCII 字符串，通常用于在 URL 或 cookie 中传输数据。</p></li><li><p><mark><strong><code>serialize($perm_res)</code></strong>：这是一个函数，用于将对象或数组转换为字符串格式，以便存储。这里将 <code>$perm_res</code> 对象序列化为字符串。</mark></p></li></ul><h3 id="_4x02" tabindex="-1"><a class="header-anchor" href="#_4x02"><span>4x02.</span></a></h3><p>实现页面重定向的 PHP 代码行，常用于控制用户流向特定页面，确保用户在访问敏感资源之前进行身份验证。</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Location: authentication.php&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong><code>header(...)</code></strong>：这是 PHP 的一个内置函数，用于发送原始 HTTP 头部信息。它必须在任何输出（如 HTML 或空格）之前调用，因为 HTTP 头部必须在响应体之前发送。</p></li><li><p><strong><code>&quot;Location: authentication.php&quot;</code></strong>：这是传递给 <code>header</code> 函数的字符串参数。它指定了一个 HTTP 头部，表示客户端（通常是浏览器）应该重定向到的 URL。</p><ol><li><p><strong><code>Location:</code></strong>：这是一个 HTTP 头部字段，指示浏览器应该重定向到另一个页面。</p></li><li><ul><li><strong><code>authentication.php</code></strong>：这是目标页面的相对路径或 URL。在这个例子中，用户将被重定向到名为 <code>authentication.php</code> 的页面。</li></ul></li></ol></li></ul><h3 id="_4x03" tabindex="-1"><a class="header-anchor" href="#_4x03"><span>4x03.</span></a></h3><p>终止程序执行</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">die</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>这是一个 PHP 函数，用于终止当前脚本的执行。调用 <code>die()</code> 后，脚本将停止运行，后续的代码将不会被执行。这个函数通常用于在发生错误或满足特定条件时，立即停止程序的执行。</li></ul><h1 id="_5-php与html联合实现逻辑" tabindex="-1"><a class="header-anchor" href="#_5-php与html联合实现逻辑"><span>5.PHP与html联合实现逻辑</span></a></h1>`,28)]))}const d=i(n,[["render",l],["__file","PHP笔记.html.vue"]]),h=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/PHP%E7%AC%94%E8%AE%B0.html","title":"PHP笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-19T00:00:00.000Z","tags":null,"title":"PHP笔记","category":["项目"],"description":"1. 写在前面 通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，《项目驱动》，可以这么说吧 2. 注释符 // 3. POST 超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以$_POST的形式检索或引用其中的数据 例如 在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示 <form ...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/PHP%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"PHP笔记"}],["meta",{"property":"og:description","content":"1. 写在前面 通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，《项目驱动》，可以这么说吧 2. 注释符 // 3. POST 超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以$_POST的形式检索或引用其中的数据 例如 在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示 <form ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-19T10:04:54.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-19T10:04:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PHP笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-19T10:04:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":3,"title":"4x01.","slug":"_4x01","link":"#_4x01","children":[]},{"level":3,"title":"4x02.","slug":"_4x02","link":"#_4x02","children":[]},{"level":3,"title":"4x03.","slug":"_4x03","link":"#_4x03","children":[]}],"git":{"createdTime":1734598308000,"updatedTime":1734602694000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":11,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"article/01_项目/PHP笔记.md","localizedDate":"2024年12月19日","excerpt":"\\n<p><strong>通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，《项目驱动》，可以这么说吧</strong></p>\\n<h1>2. 注释符</h1>\\n<p><code>//</code></p>\\n<h1>3. POST</h1>\\n<p><strong>超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以<code>$_POST</code>的形式检索或引用其中的数据</strong></p>\\n<ul>\\n<li>例如</li>\\n</ul>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Array</span></span>\\n<span class=\\"line\\"><span>(</span></span>\\n<span class=\\"line\\"><span>    [user] =&gt; 用户输入的用户名</span></span>\\n<span class=\\"line\\"><span>    [pass] =&gt; 用户输入的密码</span></span>\\n<span class=\\"line\\"><span>)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,h as data};
