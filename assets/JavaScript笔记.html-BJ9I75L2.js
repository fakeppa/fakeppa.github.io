import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,o as n}from"./app-upTkzMhn.js";const e={};function r(d,t){return n(),i("div",null,t[0]||(t[0]=[a(`<p>找时间重启这个项目</p><h2 id="先插一嘴" tabindex="-1"><a class="header-anchor" href="#先插一嘴"><span>先插一嘴</span></a></h2><h3 id="js的异步函数" tabindex="-1"><a class="header-anchor" href="#js的异步函数"><span>js的异步函数：</span></a></h3><p>示例：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">210</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(async () =&gt; {...})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em>自执行的异步函数。使用 <code>async</code> 关键字定义一个异步函数，使得可以在函数内部使用 <code>await</code> 关键字来处理异步操作。这个函数会立即执行。</em></p><ul><li><code>() =&gt; {...}</code>：这是一个箭头函数的定义，表示函数体内的代码将在函数被调用时执行。</li><li><code>()</code>：外层的括号用于将箭头函数包裹起来，以便立即执行。</li></ul><p>Q：什么是自执行的异步函数？</p><ul><li><p>自执行的异步函数（Immediately Invoked Async Function Expression，IIFE）是一种在 JavaScript 中定义并立即执行的异步函数。它结合了异步函数的特性和自执行函数的特性，允许你在定义函数的同时立即运行它。自执行的异步函数是一种强大的工具，允许开发者在 JavaScript 中以更清晰和结构化的方式处理异步操作，同时避免全局作用域的污染。<br> 作用</p><p>自执行的异步函数的主要作用包括:</p><ul><li><strong>封装作用域</strong>：它创建了一个新的作用域，避免了全局命名冲突。函数内部定义的变量不会污染全局作用域。</li><li><strong>异步操作</strong>：可以在函数内部使用 <code>await</code> 关键字，方便地处理异步操作，比如网络请求、文件读取等。</li><li><strong>立即执行</strong>：在定义后立即执行，适合于需要立即运行的初始化代码。</li></ul></li></ul><hr><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">210</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>const response = ...</code></strong>：定义一个常量 <code>response</code>，用于存储从网络请求中获取的响应。</li><li><strong><code>await fetch(...)</code></strong>：使用 <code>fetch</code> 方法发起一个网络请求。<code>fetch</code> 是一个用于请求资源的异步函数，返回一个 Promise 对象。</li><li><strong><code>getString(210)</code></strong>：调用 <code>getString</code> 函数，传入参数 <code>210</code>，该函数返回一个字符串，通常是一个 URL。这个 URL 是从混淆的字符串数组中获取的。</li><li><ul><li><strong><code>await</code></strong>：在这里，<code>await</code> 关键字用于等待 <code>fetch</code> 操作完成，并将结果赋值给 <code>response</code>。这意味着代码会在这一行暂停，直到网络请求完成。</li></ul></li></ul><hr><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>exports = ...</code></strong>：将 <code>instance</code> 对象的 <code>exports</code> 属性赋值给全局变量 <code>exports</code>。<code>exports</code> 是 WebAssembly 模块导出的接口，允许 JavaScript 代码调用 WebAssembly 模块中的函数和变量。</li><li><strong><code>instance.exports</code></strong>：这是 WebAssembly 模块实例的导出对象，包含了模块中定义的所有可供外部调用的函数和变量。</li></ul><hr><h3 id="异步执行逻辑" tabindex="-1"><a class="header-anchor" href="#异步执行逻辑"><span>异步执行逻辑</span></a></h3><p>定义异步函数获取数据<br> 在定义异步函数之后定义其他函数<br> 定义回调函数获取数据。。。</p><h2 id="javascript-显示数据" tabindex="-1"><a class="header-anchor" href="#javascript-显示数据"><span>JavaScript 显示数据</span></a></h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li>使用 <strong>window.alert()</strong> 弹出警告框。</li><li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li><li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li><li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li></ul><h2 id="javascript-变量" tabindex="-1"><a class="header-anchor" href="#javascript-变量"><span>JavaScript 变量</span></a></h2><p>在编程语言中，变量用于存储数据值。</p><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var length;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">length = 6;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">document.getElementById(&quot;demo&quot;).innerHTML = length;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript语言有多种类型的运算符：</p><table><thead><tr><th>类型</th><th style="text-align:left;">实例</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td>赋值，算术和位运算符</td><td style="text-align:left;">= + - * /</td><td style="text-align:left;">在 JS 运算符中描述</td></tr><tr><td>条件，比较及逻辑运算符</td><td style="text-align:left;">== != &lt; &gt;</td><td style="text-align:left;">在 JS 比较运算符中描述</td></tr></tbody></table><h2 id="javascript-关键字" tabindex="-1"><a class="header-anchor" href="#javascript-关键字"><span>JavaScript 关键字</span></a></h2><table><thead><tr><th><strong>abstract</strong></th><th><strong>else</strong></th><th><strong>instanceof</strong></th><th><strong>super</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>boolean</strong></td><td><strong>enum</strong></td><td><strong>int</strong></td><td><strong>switch</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>break</strong></td><td><strong>export</strong></td><td><strong>interface</strong></td><td><strong>synchronized</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>byte</strong></td><td><strong>extends</strong></td><td><strong>let</strong></td><td><strong>this</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>case</strong></td><td><strong>false</strong></td><td><strong>long</strong></td><td><strong>throw</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>catch</strong></td><td><strong>final</strong></td><td><strong>native</strong></td><td><strong>throws</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>char</strong></td><td><strong>finally</strong></td><td><strong>new</strong></td><td><strong>transient</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>class</strong></td><td><strong>float</strong></td><td><strong>null</strong></td><td><strong>true</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>const</strong></td><td><strong>for</strong></td><td><strong>package</strong></td><td><strong>try</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>continue</strong></td><td><strong>function</strong></td><td><strong>private</strong></td><td><strong>typeof</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>debugger</strong></td><td><strong>goto</strong></td><td><strong>protected</strong></td><td><strong>var</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>default</strong></td><td><strong>if</strong></td><td><strong>public</strong></td><td><strong>void</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>delete</strong></td><td><strong>implements</strong></td><td><strong>return</strong></td><td><strong>volatile</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>do</strong></td><td><strong>import</strong></td><td><strong>short</strong></td><td><strong>while</strong></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>double</strong></td><td><strong>in</strong></td><td><strong>static</strong></td><td><strong>with</strong></td></tr></tbody></table><h2 id="javascript-数据类型" tabindex="-1"><a class="header-anchor" href="#javascript-数据类型"><span>JavaScript 数据类型</span></a></h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p><p>var length = 16; // Number 通过数字字面量赋值<br> var points = x * 10; // Number 通过表达式字面量赋值<br> var lastName = &quot;Johnson&quot;; // String 通过字符串字面量赋值<br> var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;]; // Array 通过数组字面量赋值<br> var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;}; // Object 通过对象字面量赋值</p>`,35)]))}const p=s(e,[["render",r],["__file","JavaScript笔记.html.vue"]]),o=JSON.parse('{"path":"/article/03_%E8%B5%84%E6%BA%90/JavaScript%E7%AC%94%E8%AE%B0.html","title":"JavaScript笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-10T00:00:00.000Z","category":["资源"],"tags":["只学了一点"],"title":"JavaScript笔记","description":"找时间重启这个项目 先插一嘴 js的异步函数： 示例： 解析 自执行的异步函数。使用 async 关键字定义一个异步函数，使得可以在函数内部使用 await 关键字来处理异步操作。这个函数会立即执行。 () => {...}：这是一个箭头函数的定义，表示函数体内的代码将在函数被调用时执行。 ()：外层的括号用于将箭头函数包裹起来，以便立即执行。 Q：什...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/03_%E8%B5%84%E6%BA%90/JavaScript%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"JavaScript笔记"}],["meta",{"property":"og:description","content":"找时间重启这个项目 先插一嘴 js的异步函数： 示例： 解析 自执行的异步函数。使用 async 关键字定义一个异步函数，使得可以在函数内部使用 await 关键字来处理异步操作。这个函数会立即执行。 () => {...}：这是一个箭头函数的定义，表示函数体内的代码将在函数被调用时执行。 ()：外层的括号用于将箭头函数包裹起来，以便立即执行。 Q：什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T13:30:14.000Z"}],["meta",{"property":"article:tag","content":"只学了一点"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T13:30:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-16T13:30:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"先插一嘴","slug":"先插一嘴","link":"#先插一嘴","children":[{"level":3,"title":"js的异步函数：","slug":"js的异步函数","link":"#js的异步函数","children":[]},{"level":3,"title":"异步执行逻辑","slug":"异步执行逻辑","link":"#异步执行逻辑","children":[]}]},{"level":2,"title":"JavaScript 显示数据","slug":"javascript-显示数据","link":"#javascript-显示数据","children":[]},{"level":2,"title":"JavaScript 变量","slug":"javascript-变量","link":"#javascript-变量","children":[]},{"level":2,"title":"JavaScript 关键字","slug":"javascript-关键字","link":"#javascript-关键字","children":[]},{"level":2,"title":"JavaScript 数据类型","slug":"javascript-数据类型","link":"#javascript-数据类型","children":[]}],"git":{"createdTime":1735300058000,"updatedTime":1760621414000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":1244,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":3.49,"words":1048},"filePathRelative":"article/03_资源/JavaScript笔记.md","localizedDate":"2024年12月10日","excerpt":"<p>找时间重启这个项目</p>\\n<h2>先插一嘴</h2>\\n<h3>js的异步函数：</h3>\\n<p>示例：</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">async</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> () </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> response</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> await</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> fetch</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getString</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">210</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    const</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\">instance</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> } </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> await</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> WebAssembly</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">instantiate</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">await</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> response</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">arrayBuffer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    exports</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> instance</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">exports</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">})();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,o as data};
