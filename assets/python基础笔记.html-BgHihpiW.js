import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-DEScnn0v.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典"><span>字典</span></a></h2><h3 id="创建字典" tabindex="-1"><a class="header-anchor" href="#创建字典"><span>创建字典</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法1：直接定义</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;New York&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法2：使用 dict() 构造函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">city</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;London&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 键自动转为字符串，无需引号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法3：通过键值对列表转换</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Charlie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">28</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Paris&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法4：字典推导式（动态生成）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">squares </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {x: x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)}  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># {1:1, 2:4, 3:9, 4:16, 5:25}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、索引与访问元素" tabindex="-1"><a class="header-anchor" href="#二、索引与访问元素"><span>二、索引与访问元素</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. 通过键访问值</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_dict[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: Alice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 使用 get() 方法（避免 KeyError）</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 30</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;country&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: None（键不存在）</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;country&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;默认值&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 默认值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、添加-修改元素" tabindex="-1"><a class="header-anchor" href="#三、添加-修改元素"><span>三、添加/修改元素</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. 直接赋值（添加或修改）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;email&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;alice@example.com&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 新增键值对</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 31</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     # 修改已有键的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 合并字典（update()）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new_data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;country&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;USA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;job&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Engineer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_data)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 new_data 的键值对合并到 my_dict</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、删除元素" tabindex="-1"><a class="header-anchor" href="#四、删除元素"><span>四、删除元素</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. 删除指定键值对</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">del</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 直接删除，若键不存在会报错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;job&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除并返回键对应的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 清空字典</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">clear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 清空所有键值对，得到空字典 {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3. 删除整个字典</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">del</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除字典对象，后续访问会报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、遍历字典" tabindex="-1"><a class="header-anchor" href="#五、遍历字典"><span>五、遍历字典</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历所有键</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key, my_dict[key])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历所有键（等效写法）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历所有值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历所有键值对</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key, value </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="字节串" tabindex="-1"><a class="header-anchor" href="#字节串"><span>字节串</span></a></h1><p>在python中字节串以<code>b&quot;&quot;</code>闭合，以<code>\\x ASCII码</code>形式存储，在遍历时会遍历每一个<code>\\x</code>块，那么这样的话就可以避免unicode存储时看见迷惑的字符，可以更加直观地处理数据</p><h1 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换"><span>大小写转换</span></a></h1><h6 id="_1-使用-str-lower-或-str-upper" tabindex="-1"><a class="header-anchor" href="#_1-使用-str-lower-或-str-upper"><span><strong>1. 使用 <code>str.lower()</code> 或 <code>str.upper()</code></strong></span></a></h6><p>将字符串转换为小写或大写，然后进行比较。这是最常见的方法。</p><h1 id="zip" tabindex="-1"><a class="header-anchor" href="#zip"><span>zip():</span></a></h1><ul><li><code>zip()</code> 函数将两个可迭代对象 <code>x</code> 和 <code>y</code> 组合成一个迭代器，返回一个元组的列表，其中每个元组包含来自 <code>x</code> 和 <code>y</code> 的对应元素。 <ul><li>for i,j in zip(x,y)<br> join() 方法是 Python 中字符串对象的一个方法，用于将可迭代对象（如列表、元组等）中的元素连接成一个字符串。这个方法非常灵活，可以使用任何字符串作为分隔符。</li></ul></li></ul><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(iterable)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>str</code></strong>: 这是用作分隔符的字符串。</li><li><strong><code>iterable</code></strong>: 这是一个可迭代对象，通常是一个列表或元组，包含要连接的字符串元素。</li></ul><h1 id="strip" tabindex="-1"><a class="header-anchor" href="#strip"><span>strip()</span></a></h1><ul><li><p><strong>功能</strong>：<code>strip()</code> 方法用于去除字符串开头和结尾的空白字符或指定字符。</p></li><li><p>语法</p><p>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>str.strip([chars])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>chars</code>：可选参数，指定要去除的字符集合。如果不提供，默认去除空白字符（如空格、制表符、换行符等）</li></ul></li></ul><p>print() 输出函数 print(value,.......,sep=&#39; &#39;,end=&#39;\\n&#39;,file=None)</p><pre><code>                                                         结束符                                               
</code></pre><h1 id="lstrip" tabindex="-1"><a class="header-anchor" href="#lstrip"><span>lstrip()</span></a></h1><ul><li><p><strong>功能</strong>：<code>lstrip()</code> 方法用于去除字符串左侧（开头）的空白字符或指定字符。</p></li><li><p>语法</p><p>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>str.lstrip([chars])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>chars</code>：可选参数，指定要去除的字符集合。如果不提供，默认去除空白字符（如空格、制表符、换行符等）。</li></ul></li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;   Hello, World!   &quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">lstrip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: &quot;Hello, World!   &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text_with_chars </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;xxxyHello, World!xxxy&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result_with_chars </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text_with_chars.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">lstrip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;xy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result_with_chars)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: &quot;Hello, World!xxxy&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="rstrip" tabindex="-1"><a class="header-anchor" href="#rstrip"><span>rstrip()</span></a></h1><ul><li><p><strong>功能</strong>：<code>rstrip()</code> 方法用于去除字符串右侧（结尾）的空白字符或指定字符。</p></li><li><p>语法</p><p>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>str.rstrip([chars])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>chars</code>：可选参数，指定要去除的字符集合。如果不提供，默认去除空白字符。</li></ul></li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;   Hello, World!   &quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rstrip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: &quot;   Hello, World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text_with_chars </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;xxxyHello, World!xxxy&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result_with_chars </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text_with_chars.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rstrip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;xy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result_with_chars)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: &quot;xxxyHello, World!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>id（）序列的内存地址<br> input() 输入函数<br> &#39; &#39; 内的数据为字符串</p><p>range()函数 产生（n,m） 的整数序列<br> if 选择结构 可以与取反not结合<br> else，选择，可在同一行使用 True(语句块1) if(条件) False(语句块2)<br> elif 多分支结构 True则在执行语句块后结束，False则继续判断下一个条件<br> and 连接多个条件判断时，都满足才执行if后面的语句块<br> or 只要有一个正确，则执行if语句块</p><p>for变量in... 遍历结构 后续步进语句块对每一次遍历进行操作 遍历函数<br> 后接else函数，可在正常循环结束后执行语句块</p><p>while 无限循环结构 包括四个部分：1.初始化变量<br> 2.条件判断<br> 3.语句块<br> 4.改变变量</p><p>break 跳出循环结构，与if搭配使用<br> continue 跳过本次循环的后续代码，从而执行下一次循环操作<br> pass 只占位，不报错，可用在if for while，函数的定义，类的定义中</p><p>----------------------------------序列-----------------------------------------------------<br> 序列是一个存储多个值的连续空间<br> 属于组合数据类型/列表的还有 1.列表<br> 2.元组 以上有序<br> 3.集合<br> 4.字典 以上无序</p><p>序列和索引<br> in 判断函数 print(序列1,in,序列2) 序列2里是否含有序列1 有为True，无则False<br> not in 与上述判断布尔值相反<br> len(x)函数 序列x的长度（即序列的长度）<br> max（s） 序列s中的最大值<br> min（s）序列s中元素最小值<br> s.index(x) 序列s中第一次出现元素x的位置<br> s.count(x) 序列s中出现x的次数</p><p>序列的切片操作<br> 1.序列名[起始位置:结束位置:步长]</p><p>列表<br> 1.内置的可变序列<br> 2.列表元素是任意数据类型<br> 3.列表的删除 del 列表名</p><p>列表创建方法<br> 1.使用[]直接创建<br> 列表名=[element1,element2,.......elementN]<br> 2.使用内置函数list()创建列表<br> 列表名=list(序列)</p><p>枚举<br> enumerate(iterable, start=0)</p><p>start为制定起始值常用在for循环中，</p><p>for index，序列名 in enumerate(iterable, start=0)</p><h1 id="列表的相关操作" tabindex="-1"><a class="header-anchor" href="#列表的相关操作"><span>列表的相关操作</span></a></h1><ol><li>lst.append(x) 在列表lst最后增加一个元素</li><li>lst.insert(index,x) 在列表中第index位置增加一个元素</li><li>lst.clear() 清除lst中所有元素</li><li>lst.pop(index) 将列表lst中第index元素取出，并从列表中删除</li><li>lst.remove(x) 将列表lst中出现的第一个元素x删除</li><li>lst.reverse(x) 将列表lst中的元素反转</li><li>lst.copy（） 拷贝lst中的所有元素，生成一个新的列表<br> 当需要索引许多列表中的一个时，可以进行列表套列表操作<br> 空列表在布尔上下文中被视为 <code>False</code></li></ol><h2 id="类型转化函数" tabindex="-1"><a class="header-anchor" href="#类型转化函数"><span>--------类型转化函数------</span></a></h2><ol><li>int 将字符串转为整数的函数</li><li>float(x) 将x转换为浮点数类型,float类型转换成int类型，只保留整数部分</li><li>chr(x) 将整数x转为一个字符</li><li>ord(x) 将字符x转为其对应的整数值</li><li>hex(x) 将一个整数x转换为一个十六进制字符串</li><li>oct(x) 将一个整数x转换为一个八进制字符串</li><li>bin(x) 将一个整数x转换为一个二进制字符串</li><li>eval(x) 去掉字符串左右的引号，使字符串内进行运算 例：对字符串进行命名<br> str(x) 将x转化为字符串类型</li></ol><h1 id="单行注释" tabindex="-1"><a class="header-anchor" href="#单行注释"><span>单行注释</span></a></h1><p>&quot;&quot;&quot; &quot;&quot;&quot;或&#39;&#39;&#39; &#39;&#39;&#39; 多行注释</p><p>进制前缀<br> 1、二进制以0b开头。</p><p>2、八2113进制5261在输出4102的时候以0开头，例如：0123十进制的83。</p><p>3、十进制正常输出，1653无特别表示。</p><p>4、十六进制在输出的时候以0X或者0x开头，例如0x123 十进制的291。</p><p>四则运算符</p><ul><li>连接符/加法</li></ul><ul><li>减法</li></ul><ul><li>重复n次字符串/乘法<br> / 除法<br> // 整除<br> % 取余<br> ** 幂运算</li></ul><p>赋值运算<br> x+=y # 40 相当于x=x+y<br> x-=y # 相当于x=x-y<br> x*=y 相当于x=x<em>y<br> x</em>=y 同理<br> x%=2 # 相当于 x=x%2<br> y//=z # 相当于y=y//z<br> y**=2 # 相当于 y=y**2</p><p>逻辑运算符<br> and 与 从左到右计算<br> or 或 从左到右<br> not 非 从右到左</p><p>比较运算符</p><blockquote></blockquote><p>&lt;<br> == 等于<br> != 不等于</p><blockquote><p>= 大于或等于<br> &lt;= 小于或等于</p></blockquote><p>位运算符<br> 位与 &amp;<br> 位或 |<br> 位异或 ^<br> 位取反 ~</p><p>运算符的优先级</p><ol><li>**</li><li>·,+,- 取反，正号，负号</li><li>*,/,%,//</li><li>+,-</li><li>&lt;&lt;,&gt;&gt; 左移位和右移位</li><li>&amp; 按位与</li><li>^ 异或</li><li>| 按位或</li><li>&lt;,&lt;=,&gt;,&gt;=,!=,== 比较运算符</li></ol><p>数值类型<br> 1.数值型 2.字符串型 3.布尔型</p><p>1： 整数，浮点数，复数 三类</p><pre><code>   整数为不可变数据类型

         整数的三种表示形式：1.默认为十进制
                                         2.0b或0B为魏晋至
                                         3.0o或0O为八进制
                                         4.0x或0X为十六进制
</code></pre><p>转义字符1.\\n 换行符<br> 2./t 水平制表位<br> 3.&quot; 双引号<br> 4.&#39; 单引号<br> 5.\\ 一个反斜杠<br> r可以使以上转义字符失效</p><p>print(round(0.1+0.2,1)) round可以对括号内的数字进行保留小数运算，避免不确定的位数问题“,1&quot; 表示保留一位小数</p><p>字符串的切片和索引，格式print(字符串[N;M])，意思是输出字符串中从N到M的字符，也可去掉N：变为输出单个字符</p><p>格式化输入</p><p><strong>字符串格式化</strong>： 使用 <code>%s</code> 来格式化字符串。</p><p><strong>整数格式化</strong>： 使用 <code>%d</code> 来格式化整数。</p><h3 id="用-在一个字符串格式化多个变量" tabindex="-1"><a class="header-anchor" href="#用-在一个字符串格式化多个变量"><span>用 <code>%</code> 在一个字符串格式化多个变量</span></a></h3><p>这种方法是较旧的字符串格式化方式，使用 <code>%</code> 操作符来插入变量。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Charlie&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 28</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">formatted_string </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;My name is </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and I am </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> years old.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (name, age)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(formatted_string)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数"><span>自定义函数</span></a></h1><ol><li><p>定义函数</p><ul><li>形式：def name(n1,n2,n3...):</li><li>def:关键字</li><li>name:函数名</li><li>n1,n2...:获取的输入函数内部的外部数据</li><li>需要返回值时用return (需要返回的数据) 来进行返回数据操作</li><li>定义函数的时候可以def name(n1=None)来定义无输入时的默认变量数值 <ul><li>eg: def name(data=None):<br> if data is None:<br> express</li></ul></li></ul></li><li><p>函数的调用</p><ul><li>形式：函数名( n1,n2 )</li><li>解释：这个整体本身具有函数return的值，可以进行赋值，判断等操作</li><li>可以以name(n2= ,n1= ,...)的形式进行传参，不需要依赖传参的顺序</li></ul></li></ol><h1 id="sorted函数-列表排序" tabindex="-1"><a class="header-anchor" href="#sorted函数-列表排序"><span>sorted函数（列表排序）</span></a></h1><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(iterable, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>iterable</strong>: 需要排序的可迭代对象，例如列表、元组、字符串等。</li><li><strong>key</strong>: 一个函数，用于从每个元素中提取一个用于比较的值。默认值为 <code>None</code>，表示直接比较元素。</li><li><strong>reverse</strong>: 一个布尔值，如果设置为 <code>True</code>，则结果将按降序排列；如果为 <code>False</code>（默认值），则按升序排列。</li></ul><h1 id="count函数" tabindex="-1"><a class="header-anchor" href="#count函数"><span><em><strong>count函数</strong></em></span></a></h1><p><code>count</code> 函数在 Python 中是一个非常有用的方法，通常用于计算某个元素在列表、字符串或其他可迭代对象中出现的次数。下面是关于 <code>count</code> 函数的详细说明和示例。</p><h3 id="_1-在列表中的使用" tabindex="-1"><a class="header-anchor" href="#_1-在列表中的使用"><span>1. 在列表中的使用</span></a></h3><p>在列表中，<code>count</code> 方法可以用来计算某个特定元素出现的次数。其语法如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(element)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>element</strong>: 你想要计算的元素。</li></ul><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例：</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count_of_1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_list.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(count_of_1)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>1</code> 在 <code>my_list</code> 中出现了三次，因此 <code>count_of_1</code> 的值为 <code>3</code>。</p><h3 id="_2-在字符串中的使用" tabindex="-1"><a class="header-anchor" href="#_2-在字符串中的使用"><span>2. 在字符串中的使用</span></a></h3><p>在字符串中，<code>count</code> 方法用于计算子字符串出现的次数。其语法如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(substring)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>substring</strong>: 你想要计算的子字符串。</li></ul><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例：</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_string </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello world, hello everyone&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count_of_hello </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_string.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(count_of_hello)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，子字符串 <code>&quot;hello&quot;</code> 在 <code>my_string</code> 中出现了两次。</p><h3 id="_3-其他可迭代对象" tabindex="-1"><a class="header-anchor" href="#_3-其他可迭代对象"><span>3. 其他可迭代对象</span></a></h3><p><code>count</code> 方法也可以用于其他可迭代对象，如元组等。用法与列表类似。</p><h4 id="示例-4" tabindex="-1"><a class="header-anchor" href="#示例-4"><span>示例：</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_tuple </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count_of_1_in_tuple </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> my_tuple.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(count_of_1_in_tuple)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项"><span>4. 注意事项</span></a></h3><ul><li><code>count</code> 方法是区分大小写的。在字符串中，<code>&quot;Hello&quot;</code> 和 <code>&quot;hello&quot;</code> 被视为不同的字符串。</li><li>如果元素在列表或字符串中不存在，<code>count</code> 方法将返回 <code>0</code>。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>count</code> 函数是一个简单而强大的工具，可以帮助开发者快速统计元素的出现次数。无论是在列表、字符串还是其他可迭代对象中，它都能提供方便的计数功能。希望这些信息对你理解 <code>count</code> 函数有所帮助！如果你有其他问题或需要更多示例，请随时问我。</p><h1 id="忽略字符串中的空格" tabindex="-1"><a class="header-anchor" href="#忽略字符串中的空格"><span>忽略字符串中的空格</span></a></h1><p>使用 <code>str.replace()</code> 方法</p><p>如果你想要删除字符串中的所有空格，可以使用 <code>replace()</code> 方法将空格替换为空字符串。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;这 是 一 个 测 试 字 符 串&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 这是一个测试字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span><strong>随机数</strong></span></a></h1><p>在Python中，生成随机数可以使用内置的 <code>random</code> 模块。这个模块提供了多种方法来生成随机数，包括整数、浮点数和从序列中随机选择元素。以下是一些常用的随机数生成方法：</p><h3 id="_1-生成随机浮点数" tabindex="-1"><a class="header-anchor" href="#_1-生成随机浮点数"><span>1. 生成随机浮点数</span></a></h3><p>使用 <code>random.random()</code> 方法可以生成一个在 <code>[0.0, 1.0)</code> 范围内的随机浮点数。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random_float</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random.random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random_float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 例如 0.37444887175646646</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-生成指定范围内的随机整数" tabindex="-1"><a class="header-anchor" href="#_2-生成指定范围内的随机整数"><span>2. 生成指定范围内的随机整数</span></a></h3><p>使用 <code>random.randint(a, b)</code> 方法可以生成一个在 <code>[a, b]</code> 范围内的随机整数，包括 <code>a</code> 和 <code>b</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random_int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random.randint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random_int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 例如 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-生成指定范围内的随机浮点数" tabindex="-1"><a class="header-anchor" href="#_3-生成指定范围内的随机浮点数"><span>3. 生成指定范围内的随机浮点数</span></a></h3><p>使用 <code>random.uniform(a, b)</code> 方法可以生成一个在 <code>[a, b]</code> 范围内的随机浮点数。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random_float_range</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random.uniform</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.5,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random_float_range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 例如 3.141592653589793</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-从序列中随机选择元素" tabindex="-1"><a class="header-anchor" href="#_4-从序列中随机选择元素"><span>4. 从序列中随机选择元素</span></a></h3><p>使用 <code>random.choice()</code> 方法可以从一个序列（如列表、元组等）中随机选择一个元素。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;apple&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;banana&#39;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;cherry&#39;]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random_item</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random.choice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random_item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 例如 &#39;banana&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-生成多个随机数" tabindex="-1"><a class="header-anchor" href="#_5-生成多个随机数"><span>5. 生成多个随机数</span></a></h3><p>使用 <code>random.sample()</code> 方法可以从一个序列中随机选择多个不重复的元素。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;apple&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;banana&#39;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;cherry&#39;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;date&#39;]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random_samples</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random.sample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">items,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random_samples</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出: 例如 [&#39;banana&#39;, &#39;date&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-生成随机数种子" tabindex="-1"><a class="header-anchor" href="#_6-生成随机数种子"><span>6. 生成随机数种子</span></a></h3><p>为了确保每次运行程序时生成的随机数相同，可以使用 <code>random.seed()</code> 方法设置随机数种子。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">random.seed(42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置种子</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">random.random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  # 输出: 例如 0.6394267984578837</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>Python 的 <code>random</code> 模块提供了多种生成随机数的方法，可以根据需要选择合适的函数来生成随机数。无论是生成浮点数、整数，还是从序列中选择元素，<code>random</code> 模块都能满足需求。</p><h1 id="定义一个函数" tabindex="-1"><a class="header-anchor" href="#定义一个函数"><span>定义一个函数</span></a></h1><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li><p>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号**()**。</p></li><li><p>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</p></li><li><p>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</p></li><li><p>函数内容以冒号起始，并且缩进。</p></li><li><p><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</p><h1 id="自定义函数-1" tabindex="-1"><a class="header-anchor" href="#自定义函数-1"><span>自定义函数</span></a></h1><p><strong>创建一个自定义函数</strong></p><p>def 函数名（变量名1，变量名2，。。。变量名n）</p><p>​ 表达式</p><p>​ return</p></li></ul><p><strong>引用一个自定义函数</strong></p><p>​ 函数名（参数1，参数2.。。）</p><h1 id="python-元组" tabindex="-1"><a class="header-anchor" href="#python-元组"><span>Python 元组</span></a></h1><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号，列表使用方括号。</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><p>如下实例：</p><h2 id="实例-python-2-0" tabindex="-1"><a class="header-anchor" href="#实例-python-2-0"><span>实例(Python 2.0+)</span></a></h2><p>tup1 = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000) tup2 = (1, 2, 3, 4, 5 ) tup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;</p><h3 id="元组中只包含一个元素时-需要在元素后面添加逗号" tabindex="-1"><a class="header-anchor" href="#元组中只包含一个元素时-需要在元素后面添加逗号"><span>元组中只包含一个元素时，<strong>需要在元素后面添加逗号</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tup1 = (50,)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="修改元组" tabindex="-1"><a class="header-anchor" href="#修改元组"><span>修改元组</span></a></h2><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p><h2 id="删除元组" tabindex="-1"><a class="header-anchor" href="#删除元组"><span>删除元组</span></a></h2><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p><h2 id="元组内置函数" tabindex="-1"><a class="header-anchor" href="#元组内置函数"><span>元组内置函数</span></a></h2><p>Python元组包含了以下内置函数</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><a href="https://www.runoob.com/python/att-tuple-cmp.html" target="_blank" rel="noopener noreferrer">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><a href="https://www.runoob.com/python/att-tuple-len.html" target="_blank" rel="noopener noreferrer">len(tuple)</a> 计算元组元素个数。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><a href="https://www.runoob.com/python/att-tuple-max.html" target="_blank" rel="noopener noreferrer">max(tuple)</a> 返回元组中元素最大值。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><a href="https://www.runoob.com/python/att-tuple-min.html" target="_blank" rel="noopener noreferrer">min(tuple)</a> 返回元组中元素最小值。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener noreferrer">tuple(seq)</a> 将列表转换为元组。</td></tr></tbody></table><h2 id="删除字典元素" tabindex="-1"><a class="header-anchor" href="#删除字典元素"><span>删除字典元素</span></a></h2><p>能删单一的元素也能清空字典，清空只需一项操作。</p><p>tinydict.clear() # 清空字典所有条目</p><p>del tinydict # 删除字典</p><p>列表推导式是 Python 中一种简洁而强大的语法，用于从可迭代对象（如列表、元组、字符串等）生成新的列表。它允许你在一行代码中创建列表，通常比使用传统的 <code>for</code> 循环更简洁和可读。</p><h1 id="列表推导式" tabindex="-1"><a class="header-anchor" href="#列表推导式"><span>列表推导式</span></a></h1><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><p>列表推导式的基本语法如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[expression </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> iterable </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>expression</strong>：对每个 <code>item</code> 应用的表达式，生成新列表的元素。</li><li><strong>item</strong>：可迭代对象中的每个元素。</li><li><strong>iterable</strong>：可以迭代的对象（如列表、元组、字符串等）。</li><li><strong>condition</strong>（可选）：一个可选的条件，用于过滤元素，只有满足条件的元素才会被包含在新列表中。<br> eg:groups = [group for group in groups if group]<br> 知识点：if group，只有当group非空才会为True</li></ul>`,169)]))}const r=s(t,[["render",e],["__file","python基础笔记.html.vue"]]),d=JSON.parse('{"path":"/article/02_%E9%A2%86%E5%9F%9F/Python/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html","title":"python笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-10T00:00:00.000Z","category":["领域"],"tags":null,"title":"python笔记","description":"字典 创建字典 二、索引与访问元素 三、添加/修改元素 四、删除元素 五、遍历字典 字节串 在python中字节串以b\\"\\"闭合，以\\\\x ASCII码形式存储，在遍历时会遍历每一个\\\\x块，那么这样的话就可以避免unicode存储时看见迷惑的字符，可以更加直观地处理数据 大小写转换 1. 使用 str.lower() 或 str.upper() 将字符串转...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/Python/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"python笔记"}],["meta",{"property":"og:description","content":"字典 创建字典 二、索引与访问元素 三、添加/修改元素 四、删除元素 五、遍历字典 字节串 在python中字节串以b\\"\\"闭合，以\\\\x ASCII码形式存储，在遍历时会遍历每一个\\\\x块，那么这样的话就可以避免unicode存储时看见迷惑的字符，可以更加直观地处理数据 大小写转换 1. 使用 str.lower() 或 str.upper() 将字符串转..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-12T16:21:14.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-12T16:21:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"python笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-12T16:21:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"字典","slug":"字典","link":"#字典","children":[{"level":3,"title":"创建字典","slug":"创建字典","link":"#创建字典","children":[]},{"level":3,"title":"二、索引与访问元素","slug":"二、索引与访问元素","link":"#二、索引与访问元素","children":[]},{"level":3,"title":"三、添加/修改元素","slug":"三、添加-修改元素","link":"#三、添加-修改元素","children":[]},{"level":3,"title":"四、删除元素","slug":"四、删除元素","link":"#四、删除元素","children":[]},{"level":3,"title":"五、遍历字典","slug":"五、遍历字典","link":"#五、遍历字典","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"--------类型转化函数------","slug":"类型转化函数","link":"#类型转化函数","children":[{"level":3,"title":"用 % 在一个字符串格式化多个变量","slug":"用-在一个字符串格式化多个变量","link":"#用-在一个字符串格式化多个变量","children":[]},{"level":3,"title":"1. 在列表中的使用","slug":"_1-在列表中的使用","link":"#_1-在列表中的使用","children":[]},{"level":3,"title":"2. 在字符串中的使用","slug":"_2-在字符串中的使用","link":"#_2-在字符串中的使用","children":[]},{"level":3,"title":"3. 其他可迭代对象","slug":"_3-其他可迭代对象","link":"#_3-其他可迭代对象","children":[]},{"level":3,"title":"4. 注意事项","slug":"_4-注意事项","link":"#_4-注意事项","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"1. 生成随机浮点数","slug":"_1-生成随机浮点数","link":"#_1-生成随机浮点数","children":[]},{"level":3,"title":"2. 生成指定范围内的随机整数","slug":"_2-生成指定范围内的随机整数","link":"#_2-生成指定范围内的随机整数","children":[]},{"level":3,"title":"3. 生成指定范围内的随机浮点数","slug":"_3-生成指定范围内的随机浮点数","link":"#_3-生成指定范围内的随机浮点数","children":[]},{"level":3,"title":"4. 从序列中随机选择元素","slug":"_4-从序列中随机选择元素","link":"#_4-从序列中随机选择元素","children":[]},{"level":3,"title":"5. 生成多个随机数","slug":"_5-生成多个随机数","link":"#_5-生成多个随机数","children":[]},{"level":3,"title":"6. 生成随机数种子","slug":"_6-生成随机数种子","link":"#_6-生成随机数种子","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"实例(Python 2.0+)","slug":"实例-python-2-0","link":"#实例-python-2-0","children":[{"level":3,"title":"元组中只包含一个元素时，需要在元素后面添加逗号","slug":"元组中只包含一个元素时-需要在元素后面添加逗号","link":"#元组中只包含一个元素时-需要在元素后面添加逗号","children":[]}]},{"level":2,"title":"修改元组","slug":"修改元组","link":"#修改元组","children":[]},{"level":2,"title":"删除元组","slug":"删除元组","link":"#删除元组","children":[]},{"level":2,"title":"元组内置函数","slug":"元组内置函数","link":"#元组内置函数","children":[]},{"level":2,"title":"删除字典元素","slug":"删除字典元素","link":"#删除字典元素","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]}]}],"git":{"createdTime":1734527713000,"updatedTime":1755015674000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":1394,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":14.67,"words":4400},"filePathRelative":"article/02_领域/Python/python基础笔记.md","localizedDate":"2024年12月10日","excerpt":"<h2>字典</h2>\\n<h3>创建字典</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" data-title=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 方法1：直接定义</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">my_dict </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"name\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"Alice\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"age\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">30</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"city\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"New York\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 方法2：使用 dict() 构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">my_dict </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> dict</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"Bob\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">age</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">25</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">city</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"London\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)  </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 键自动转为字符串，无需引号</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 方法3：通过键值对列表转换</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">my_dict </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> dict</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">([(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"name\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"Charlie\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">), (</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"age\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">28</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">), (</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"city\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"Paris\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 方法4：字典推导式（动态生成）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">squares </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {x: x</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">**</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> for</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> x </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">in</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> range</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">6</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)}  </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># {1:1, 2:4, 3:9, 4:16, 5:25}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
