import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as s}from"./app-TECp2i9_.js";const t={};function l(p,e){return s(),a("div",null,e[0]||(e[0]=[n('<h2 id="_1-主机发现" tabindex="-1"><a class="header-anchor" href="#_1-主机发现"><span>1.主机发现：</span></a></h2><p><strong>nmap -sn 10.32.252.0/24</strong> (扫c段)<br> -sn不进行端口扫描（也称ping扫描）(在扫描互联网的时候)</p><ol><li>发送ICMP回显请求</li><li>对端口443的TCPSYN请求</li><li>对端口80的TCPACK请求</li><li>默认情况下的ICMP时间戳请求</li></ol><ul><li>非特权用户执行时会用conact调用发送SYN数据包到443端口</li><li>特权用户发送ARP请求</li></ul><p>-sL列表扫描</p><ul><li>-sL与-sn有相同时目的吗，-sn对目标网络进行轻量级的侦查（入侵），不会引起太多注意</li></ul><hr><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo arp-scan -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这段命令与nmap -sn原理相同(在扫描本地网络的时候)</p><hr><p>--send-ip :发送ICMP时间戳请求确定主机的活动性,(arp请求可能不会被主机响应，而icmp可以，更可靠)</p><h2 id="_2-端口扫描" tabindex="-1"><a class="header-anchor" href="#_2-端口扫描"><span>2.端口扫描：</span></a></h2><ul><li>建立一个文件夹以存放扫描结果：mkdir nampscan<br><code>sudo nmap --min-rate 10000 -p- 10.10.10.21 -oA nmapscan/ports</code><br> 不指定扫描技术则默认-sS扫描,但实际应该以-sT以tcp协议进行扫描</li><li>--min-rate 1000：以最低一万的速率扫描全部端口</li><li>-p- :接需要扫描的主机</li><li>-o（输出）A（all）:数据化输出</li><li>-sS:利用tcp的syn标志位来探测目标主机的端口，发送syn包只建立tcp连接的第一步，收到syn+ack回复，则表示端口开放，若表示rst复位，则表示端口关闭（快速扫描存在的端口）</li><li>-sT:需要等待完整的tcp的连接过程，实战中这个准确性，隐蔽性更高<br> nmapscan/ports:输出到nmapscan下的ports文档中，输出文件格式.gnmap(nmap自创的形式，已被弃用) .nmap .xml</li></ul><p>需要单独将开放的端口输出到控制台：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep open nmapscan/ports.nmap | awk -F&#39;/&#39; &#39;{print $1}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>搜索posts.nmap中open的端口 | 用awk指定-F的参数，用斜杠作为分隔符，打印第一列</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>posts=$(grep open nmapscan/ports.nmap | awk -F&#39;/&#39; &#39;{print $1}&#39; | paste -sd &#39;,&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>-sd:指定合并到一行</li><li>&#39;,&#39;:分隔符是逗号</li><li>posts=$:指定变量posts</li></ul><h1 id="构造详细信息扫描" tabindex="-1"><a class="header-anchor" href="#构造详细信息扫描"><span>构造详细信息扫描</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo nmap -sT -sV -sC -O -p21,22,80,3306 10.10.21 -oA nmapscan/detail</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>-sT:用tcp协议扫描</li><li>-sV：探测服务版本</li><li>-sC:用默认脚本扫描</li><li>-O:探测服务器版本</li><li>-p:用$+tab键补全端口值</li></ul><p>本次扫描是nmap最重的一次扫描，同时可以尝试UDP扫描</p><h2 id="udp扫描" tabindex="-1"><a class="header-anchor" href="#udp扫描"><span>UDP扫描</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sduo nmap -sU --top-ports 20 10.10.10.21 -oA nampscan/udp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>sU:指定UDP协议扫描</li><li>--top-ports 20：指定扫描20端口（常用）</li><li></li></ul><h1 id="traceroute" tabindex="-1"><a class="header-anchor" href="#traceroute"><span>Traceroute</span></a></h1><p><strong><code>traceroute</code> 是一个网络诊断工具，用于显示数据包从源主机到目标主机经过的路由。它通过发送带有逐渐增加的 TTL（生存时间）值的 ICMP 数据包来工作。</strong></p><h2 id="nmap-scripting-engine-nse" tabindex="-1"><a class="header-anchor" href="#nmap-scripting-engine-nse"><span><strong>Nmap Scripting Engine (NSE)</strong></span></a></h2><p><strong>Nmap 是一个强大的网络扫描工具，NSE 允许用户编写 Lua 脚本以执行各种网络任务，如服务发现、漏洞扫描等。NSE 脚本可以通过 <code>-sC</code> 或 <code>--script</code> 选项来运行。</strong></p>',29)]))}const c=i(t,[["render",l],["__file","渗透笔记.html.vue"]]),d=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0.html","title":"渗透笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-10T00:00:00.000Z","category":["项目"],"tags":["渗透"],"title":"渗透笔记","description":"1.主机发现： nmap -sn 10.32.252.0/24 (扫c段) -sn不进行端口扫描（也称ping扫描）(在扫描互联网的时候) 发送ICMP回显请求 对端口443的TCPSYN请求 对端口80的TCPACK请求 默认情况下的ICMP时间戳请求 非特权用户执行时会用conact调用发送SYN数据包到443端口 特权用户发送ARP请求 -sL列...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"渗透笔记"}],["meta",{"property":"og:description","content":"1.主机发现： nmap -sn 10.32.252.0/24 (扫c段) -sn不进行端口扫描（也称ping扫描）(在扫描互联网的时候) 发送ICMP回显请求 对端口443的TCPSYN请求 对端口80的TCPACK请求 默认情况下的ICMP时间戳请求 非特权用户执行时会用conact调用发送SYN数据包到443端口 特权用户发送ARP请求 -sL列..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-14T06:32:48.000Z"}],["meta",{"property":"article:tag","content":"渗透"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-14T06:32:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"渗透笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-14T06:32:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.主机发现：","slug":"_1-主机发现","link":"#_1-主机发现","children":[]},{"level":2,"title":"2.端口扫描：","slug":"_2-端口扫描","link":"#_2-端口扫描","children":[]},{"level":2,"title":"UDP扫描","slug":"udp扫描","link":"#udp扫描","children":[]},{"level":2,"title":"Nmap Scripting Engine (NSE)","slug":"nmap-scripting-engine-nse","link":"#nmap-scripting-engine-nse","children":[]}],"git":{"createdTime":1733762599000,"updatedTime":1734157968000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":29,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":2.53,"words":760},"filePathRelative":"article/01_项目/渗透笔记.md","localizedDate":"2024年12月10日","excerpt":"<h2>1.主机发现：</h2>\\n<p><strong>nmap -sn 10.32.252.0/24</strong>  (扫c段)<br>\\n-sn不进行端口扫描（也称ping扫描）(在扫描互联网的时候)</p>\\n<ol>\\n<li>发送ICMP回显请求</li>\\n<li>对端口443的TCPSYN请求</li>\\n<li>对端口80的TCPACK请求</li>\\n<li>默认情况下的ICMP时间戳请求</li>\\n</ol>\\n<ul>\\n<li>非特权用户执行时会用conact调用发送SYN数据包到443端口</li>\\n<li>特权用户发送ARP请求</li>\\n</ul>\\n<p>-sL列表扫描</p>","autoDesc":true}');export{c as comp,d as data};
