import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as a}from"./app-bCbzd0IJ.js";const l={};function n(r,e){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点"><span>知识点：</span></a></h1><ul><li>ssh连接命令 #Super_SSH</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	ssh username@adress -p password yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><ul><li>检查文件是否被篡改后缀 #Secret</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>file 文件名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><ul><li>git仓库 #git<br> 回溯到之前的版本</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout 哈希值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>运行以下命令</strong>，将目录添加到安全目录列表中:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> safe.directory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/kali/drop-in</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将让您看到可用的分支</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git branch -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>显示指定文件或所有项目的变更历史，包括每次提交的内容差异。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git log -p -- message.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>grep用法: #grep<br> 以下是 <code>grep</code> 命令的一些基本用法：</p><ol><li><p><strong>基本搜索</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep &quot;pattern&quot; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会在 <code>filename</code> 文件中搜索包含 &quot;pattern&quot; 的所有行，并将这些行打印到标准输出。</p></li><li><p><strong>递归搜索</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -r &quot;pattern&quot; directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会在 <code>directory</code> 目录及其所有子目录中搜索包含 &quot;pattern&quot; 的所有文件，并打印匹配的行。</p></li><li><p><strong>忽略大小写</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -i &quot;pattern&quot; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>-i</code> 选项，<code>grep</code> 会忽略字母的大小写。</p></li><li><p><strong>使用正则表达式</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -E &quot;pattern&quot; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>-E</code> 选项允许使用扩展正则表达式，这提供了更多的模式匹配选项。</p></li><li><p><strong>排除文件</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep --exclude=&quot;*.txt&quot; &quot;pattern&quot; directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会在 <code>directory</code> 目录中搜索所有文件，但不包括以 <code>.txt</code> 结尾的文件。</p></li><li><p><strong>只打印文件名</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -l &quot;pattern&quot; directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>-l</code> 选项会让 <code>grep</code> 只打印包含匹配行的文件名，而不是打印匹配的行本身。</p></li><li><p><strong>行号</strong>：</p><p>sh</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -n &quot;pattern&quot; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>-n</code> 选项会在输出中包括匹配行的行号。</p></li></ol><p><code>grep</code> 是一个非常基础的工具，几乎所有的 Unix 和 Linux 发行版都预装了它，它也是许多其他文本处理工具和脚本的基础。</p></li></ul><hr><ul><li><p>netcat #netcat<br><strong>nc</strong>（或 <strong>netcat</strong>）实用程序几乎用于任何涉及 TCP 或 UDP 的事情。它可以打开 TCP 连接、发送 UDP 数据包、 侦听任意 TCP 和 UDP 端口，执行端口扫描，并处理 IPv4 和 IPv6。与 <strong><a href="https://linux.die.net/man/1/telnet" target="_blank" rel="noopener noreferrer">telnet</a></strong>（1） 不同，<strong>nc</strong> 脚本很好，并且可以分离错误 messages 发送到 standard 错误，而不是像 <strong><a href="https://linux.die.net/man/1/telnet" target="_blank" rel="noopener noreferrer">telnet</a></strong>（1） 那样将它们发送到 standard output。</p><ul><li><p>数据传输</p><p>上一节中的示例可以扩展以构建基本的数据传输模型。输入到连接一端的任何信息都将是 output 到另一端，并且可以轻松捕获输入和输出以模拟文件传输。</p><p>首先使用 <strong>nc</strong> 侦听特定端口，并将输出捕获到文件中：</p><p>$ nc -l 1234 &gt; filename.out</p><p>使用第二台机器，连接到侦听 <strong>nc</strong> 进程，将要传输的文件送入该进程：</p><p>$ nc <a href="http://host.example.com" target="_blank" rel="noopener noreferrer">host.example.com</a> 1234 &lt; <a href="http://filename.in" target="_blank" rel="noopener noreferrer">filename.in</a></p><p>传输文件后，连接将自动关闭。</p></li></ul></li></ul><hr><p>#ssh连接<br> ssh连接命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	ssh [username]@[hostname] -p [port]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p>#nosql-inject</p><ul><li><p>重言注入：<br> 利用条件为真的语句来进行注入，绕过条件验证</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{&quot;$ne&quot;: null}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>$ne：不等于<br> null：空<br> 意思是查询并返回所有不为空的特定数据库或表中的数据</p></li><li><p>xxe外部实体注入<br> #xml外部实体注入</p></li><li><p>什么是xxe？</p></li><li><p><strong>基本payload结构</strong><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/2c.png" alt="2c" loading="lazy"></p><p>基本命令</p></li><li><p>如何识别xxe注入<br> 抓包或者观察URL是否以&#39;ashx&#39;为后缀</p></li><li><p>构造访问外部资源的payload</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;  </span></span>
<span class="line"><span>&lt;!ENTITY  xxe SYSTEM &quot;file:///c:/2024.txt&quot; &gt;]&gt;  </span></span>
<span class="line"><span>&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中foo为key</p><ul><li><p>#JWT<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/weq21.png" alt="weq21" loading="lazy"></p><ul><li>xor:x读作位，</li></ul></li><li><p>CBC位翻攻击 #CBC位翻攻击<br> 加密过程：<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/CBCATTACK.png" alt="CBCATTACK.png" loading="lazy"></p><ol><li>Plaintext：待加密的数据。</li><li>IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</li><li>Ciphertext：加密后的数据。</li></ol><p><strong>整个加密的过程简单说来就是：</strong></p><ol><li>首先将明文分组(常见的以16字节为一组)，位数不足的使用特殊字符填充。</li><li>生成一个随机的初始化向量(IV)和一个密钥。</li><li>将IV和第一组明文异或。</li><li>用密钥对3中xor后产生的密文加密。</li><li>用4中产生的密文对第二组明文进行xor操作。</li><li>用密钥对5中产生的密文加密。</li><li>重复4-7，到最后一组明文。</li><li>将IV和加密后的密文拼接在一起，得到最终的密文。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/CBCREAVERSE.png" alt="CBCREAVERSE.png" tabindex="0" loading="lazy"><figcaption>CBCREAVERSE.png</figcaption></figure><p>这是解密过程，解密的过程其实只要理解了加密，反过来看解密过程就也很简单了，同样的，<strong><em>前一块密文参与下一块密文的还原</em></strong>。</p><ol><li>从密文中提取出IV，然后将密文分组。</li><li>使用密钥对第一组的密文解密，然后和IV进行xor得到明文。</li><li>使用密钥对第二组密文解密，然后和2中的密文xor得到明文。</li><li>重复2-3，直到最后一组密文。</li></ol></li><li><p>MD5 #MD5<br><strong>MD5</strong>（Message-Digest Algorithm 5）是一种广泛使用的哈希函数，它可以产生一个128位（16字节）的哈希值。在<strong>PDF</strong>文件中，<strong>MD5</strong>值并不是存储在文件结构的特定部分，而是通过对整个PDF文件的内容进行<strong>MD5</strong>哈希计算得出的。这意味着，如果两个PDF文件的<strong>MD5</strong>值相同，这表明这两个文件在字节级别上是完全相同的。</p></li></ul><p><strong>MD5</strong>值是对整个<strong>PDF</strong>文件内容的哈希计算结果，而不是存储在<strong>PDF</strong>文件结构中的某个特定部分。因此，当你计算一个<strong>PDF</strong>文件的<strong>MD5</strong>值时，你是在对整个文件的内容（包括上述所有部分）进行哈希计算。如果两个<strong>PDF</strong>文件的<strong>MD5</strong>值相同，这意味着它们的内容完全相同，没有任何差异。<br> #mmls</p><ul><li>一种查看磁盘映像文件的大小的命令行工具，检测分区</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mmls 文件名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,30)]))}const o=i(l,[["render",n],["__file","picoCTF知识点.html.vue"]]),h=JSON.parse('{"path":"/article/02_%E9%A2%86%E5%9F%9F/picoCTF/picoCTF%E7%9F%A5%E8%AF%86%E7%82%B9.html","title":"picoCTF知识点","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-18T00:00:00.000Z","tags":["picoCTF"],"title":"picoCTF知识点","category":["领域"],"description":"知识点： ssh连接命令 #Super_SSH 检查文件是否被篡改后缀 #Secret git仓库 #git 回溯到之前的版本 运行以下命令，将目录添加到安全目录列表中: 将让您看到可用的分支 显示指定文件或所有项目的变更历史，包括每次提交的内容差异。 grep用法: #grep 以下是 grep 命令的一些基本用法： 基本搜索： sh 这个命令会在 ...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/02_%E9%A2%86%E5%9F%9F/picoCTF/picoCTF%E7%9F%A5%E8%AF%86%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"picoCTF知识点"}],["meta",{"property":"og:description","content":"知识点： ssh连接命令 #Super_SSH 检查文件是否被篡改后缀 #Secret git仓库 #git 回溯到之前的版本 运行以下命令，将目录添加到安全目录列表中: 将让您看到可用的分支 显示指定文件或所有项目的变更历史，包括每次提交的内容差异。 grep用法: #grep 以下是 grep 命令的一些基本用法： 基本搜索： sh 这个命令会在 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/2c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-28T07:38:36.000Z"}],["meta",{"property":"article:tag","content":"picoCTF"}],["meta",{"property":"article:published_time","content":"2024-12-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-28T07:38:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"picoCTF知识点\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/2c.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/weq21.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/CBCATTACK.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/CBCREAVERSE.png\\"],\\"datePublished\\":\\"2024-12-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-28T07:38:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1734952038000,"updatedTime":1748417916000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":956,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":4.93,"words":1479},"filePathRelative":"article/02_领域/picoCTF/picoCTF知识点.md","localizedDate":"2024年12月18日","excerpt":"\\n<ul>\\n<li>ssh连接命令 #Super_SSH</li>\\n</ul>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>\\tssh username@adress -p password yes</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,h as data};
