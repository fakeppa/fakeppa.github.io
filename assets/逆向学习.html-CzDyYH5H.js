import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as n,o as s}from"./app-PvI_f8Lm.js";const a={};function l(r,t){return s(),e("div",null,t[0]||(t[0]=[n(`<h2 id="无壳程序" tabindex="-1"><a class="header-anchor" href="#无壳程序"><span>无壳程序</span></a></h2><p><strong>VC6编译</strong></p><p>直接点选运行，停止的位置就是入口点(用户代码)<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506183141.png" alt="image.png" loading="lazy"></p><p>PEID界面<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506185134.png" alt="image.png" loading="lazy"></p><h3 id="入口点-entrypoint" tabindex="-1"><a class="header-anchor" href="#入口点-entrypoint"><span><strong>入口点</strong>(Entrypoint)</span></a></h3><ul><li>​<strong>​地址​</strong>​：<code>00001700</code></li><li>​<strong>​所属节区​</strong>​：<code>.text</code><ul><li>​<strong>​意义​</strong>​：程序启动时从 <code>.text</code> 节的 <code>RVA 00001700</code> 处开始执行代码。</li><li>​<strong>​调试提示​</strong>​：在 OllyDbg 中，入口点通常对应 <code>基址 + 00001700</code>（例如基址 <code>00400000</code> → 入口点 <code>00401700</code>）。</li></ul></li></ul><h4 id="​文件偏移-file-offset-​​" tabindex="-1"><a class="header-anchor" href="#​文件偏移-file-offset-​​"><span><strong>​文件偏移（File Offset）​</strong>​</span></a></h4><ul><li>​<strong>​值​</strong>​：<code>00001700</code><ul><li>​<strong>​作用​</strong>​：入口点代码在 ​<strong>​文件中的物理位置​</strong>​（需与内存偏移区分）。</li><li>​<strong>​转换公式​</strong>​： <ul><li>内存地址 = 基址（默认 <code>00400000</code>） + RVA（<code>00001700</code>）= <code>00401700</code>。</li><li>文件地址 = 文件偏移（<code>00001700</code>），可直接用十六进制编辑器查看。</li></ul></li></ul></li></ul><h4 id="首字节-first-bytes-​​" tabindex="-1"><a class="header-anchor" href="#首字节-first-bytes-​​"><span><strong>首字节（First Bytes）​</strong>​</span></a></h4><ul><li>​<strong>​值​</strong>​：<code>55,8B,EC,6A</code><ul><li>​<strong>​对应汇编指令​</strong>​：<div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">55</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">          PUSH</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> EBP</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       ; 保存栈帧基址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">8B EC       </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">MOV</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> EBP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ESP</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   ; 设置新栈帧</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">6A ...      </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">PUSH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 压入参数（后续字节决定具体值）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>​<strong>​分析​</strong>​：这是典型的函数入口代码（如 <code>WinMain</code> 或 <code>main</code>），说明程序未加密或已脱壳。</li></ul></li></ul><h4 id="链接器信息​​" tabindex="-1"><a class="header-anchor" href="#链接器信息​​"><span><strong>链接器信息​</strong>​</span></a></h4><ul><li>​<strong>​编译器​</strong>​：<code>Microsoft Visual C++ 6.0</code></li><li>​<strong>​子系统​</strong>​：<code>Win32 GUI</code><ul><li>​<strong>​意义​</strong>​：程序是使用 VC6 开发的图形界面应用，入口函数为 <code>WinMain</code>（而非控制台的 <code>main</code>）。</li></ul></li></ul><p><strong>VS编译</strong><br> 特征：<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506195926.png" alt="image.png" loading="lazy"><br> call然后接jmp<br> call中可以看到许多的call系统api调用<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506214324.png" alt="image.png" loading="lazy"><br> ​<strong>​间接调用​</strong>​：<br> 系统 API 通过 ​<strong>​导入表（IAT）​</strong>​ 调用，地址以 <code>dword ptr ds:[&lt;API名称&gt;]</code></p><p><strong>PEid视图</strong><br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506200150.png" alt="image.png" loading="lazy"><br> VS特点：入口点只有两行代码，一个CALL后直接JMP，第一个CALL进去后调用的API也是相同的；区段相对于VC6多了一个.reloc重定位区段。</p><h2 id="脱壳" tabindex="-1"><a class="header-anchor" href="#脱壳"><span>脱壳</span></a></h2><p><strong>压缩壳</strong></p><ol><li>寻找特征代码</li><li>寻找程序入口点</li><li>恢复IAT</li><li>导出文件</li></ol><h3 id="upx" tabindex="-1"><a class="header-anchor" href="#upx"><span>UPX</span></a></h3>`,18)]))}const g=i(a,[["render",l],["__file","逆向学习.html.vue"]]),d=JSON.parse('{"path":"/article/03_%E8%B5%84%E6%BA%90/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0.html","title":"逆向学习","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-05-06T00:00:00.000Z","tags":null,"title":"逆向学习","category":["资源"],"description":"无壳程序 VC6编译 直接点选运行，停止的位置就是入口点(用户代码) image.png PEID界面 image.png 入口点(Entrypoint) ​​地址​​：00001700 ​​所属节区​​：.text ​​意义​​：程序启动时从 .text 节的 RVA 00001700 处开始执行代码。 ​​调试提示​​：在 OllyDbg 中，入口...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/03_%E8%B5%84%E6%BA%90/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"逆向学习"}],["meta",{"property":"og:description","content":"无壳程序 VC6编译 直接点选运行，停止的位置就是入口点(用户代码) image.png PEID界面 image.png 入口点(Entrypoint) ​​地址​​：00001700 ​​所属节区​​：.text ​​意义​​：程序启动时从 .text 节的 RVA 00001700 处开始执行代码。 ​​调试提示​​：在 OllyDbg 中，入口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506183141.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-15T16:46:41.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-15T16:46:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"逆向学习\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506183141.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506185134.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506195926.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506214324.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506200150.png\\"],\\"datePublished\\":\\"2025-05-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-15T16:46:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"无壳程序","slug":"无壳程序","link":"#无壳程序","children":[{"level":3,"title":"入口点(Entrypoint)","slug":"入口点-entrypoint","link":"#入口点-entrypoint","children":[]}]},{"level":2,"title":"脱壳","slug":"脱壳","link":"#脱壳","children":[{"level":3,"title":"UPX","slug":"upx","link":"#upx","children":[]}]}],"git":{"createdTime":1752377758000,"updatedTime":1755276401000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":98,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"article/03_资源/逆向学习.md","localizedDate":"2025年5月6日","excerpt":"<h2>无壳程序</h2>\\n<p><strong>VC6编译</strong></p>\\n<p>直接点选运行，停止的位置就是入口点(用户代码)<br>\\n<img src=\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506183141.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>\\n<p>PEID界面<br>\\n<img src=\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20250506185134.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{g as comp,d as data};
