import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,o as t}from"./app-Vxve-lAO.js";const s={};function n(r,i){return t(),l("div",null,i[0]||(i[0]=[a('<h3 id="构造-方法的重载-一同三不同" tabindex="-1"><a class="header-anchor" href="#构造-方法的重载-一同三不同"><span>(构造)方法的重载：一同三不同</span></a></h3><h3 id="super的两个作用" tabindex="-1"><a class="header-anchor" href="#super的两个作用"><span>super的两个作用：</span></a></h3><ol><li>用在构造方法里面：super（参数），必须位于构造方法的第一条语句，用来调用父类的构造方法</li></ol><h3 id="this两个作用" tabindex="-1"><a class="header-anchor" href="#this两个作用"><span>this两个作用：</span></a></h3><ol><li>用在构造方法里卖弄：this（参数），必须位于构造方法的第一条语句，用来调用本类的其他构造方法</li></ol><h3 id="静态变量" tabindex="-1"><a class="header-anchor" href="#静态变量"><span>静态变量</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>x可以被类名.x引用也可以被对象名.x引用，而非静态的只能通过对象名引用</p><h3 id="静态方法也可以写出" tabindex="-1"><a class="header-anchor" href="#静态方法也可以写出"><span>静态方法也可以写出</span></a></h3><h3 id="方法重写" tabindex="-1"><a class="header-anchor" href="#方法重写"><span>方法重写</span></a></h3><p>前提：继承关系<br> 位于不同类<br> 静态方法不能重写<br> 子类重写父类的方法，访问控制只能发达或等于，不能缩小</p><h3 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制"><span>访问控制</span></a></h3><p>应用于成员（成员变量或成员方法）：private-》（default）-》protected-》public<br> 类前面只有一个访问控制符public和(default)两种。<br> protected可以被其他包中的子类访问，但不可以被其他包的类方法问</p><h3 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h3><p>抽象类含有抽象方法<br> 抽象方法没有方法体</p><ol><li>有抽象方法的类一定是抽象类</li><li>抽象类不一定含有抽象方法</li><li>抽象类不能实例化对象</li><li>只要是类都有构造方法</li><li>抽象类的继承必须实现抽象方法</li></ol><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>Final</span></a></h3><ol><li>放在类前面，这个类不能被继承</li><li>放在方法前面，这个方法不能被重写</li><li>放在变量前面，这个变量就变为常量，且这个变量必须具有初始赋值</li></ol><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><ol><li>接口时多继承，间接继承</li><li>用类取实现接口，实现接口里面的抽象方法(implementa)</li><li>如果一个类时非抽象类，那么必须实现接口里面的全部抽象方法</li></ol><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><ol><li>抛出异常//不用处理</li><li>用try{<br> 容易发生异常的语句<br> }catch(参数1){<br> 异常处理<br> }finally{<br> 肯定要执行的语句<br> }</li></ol><h3 id="i-o流" tabindex="-1"><a class="header-anchor" href="#i-o流"><span>I/O流</span></a></h3><p>FileInputStream 字节输入流，从源文件中读取数据</p><ol><li>read() <ol><li>int read():一次性从文件中读取一个字节，返回这个字节对应的数值，当读取结束时，返回值为-1</li><li>int read(byte[] b):一次性最多可以从源文件中读取字节数组b长度个字节，返回值真正读取的字节个数，将读取内容存在b中，当读取结束时，返回值为-1</li><li>int read(byte[] b,int off,int len)一次性从源文件中读取len个字节，返沪hi之震亨读取的字节个数，将内容存在b中，从off位置开始存放，当读取结束时，返回值为-1</li></ol></li><li>close()</li><li>int availavle()</li></ol><p>FileOutputStream 字节输出流，往目的地写内容</p><ol><li>write() <ol><li>void write(int n) 将以个字节写入目的地</li><li>void write(byte[] b ) 一次性将字节数组b中的元素写入目的地</li><li>void write(byte[] b,int off ,int len) 将字节数组b从off位置开始，连续写len个字节到目的地文件</li></ol></li><li>close()</li></ol>',27)]))}const o=e(s,[["render",n],["__file","JAVA2.html.vue"]]),d=JSON.parse('{"path":"/article/04_%E5%BD%92%E6%A1%A3/%E5%BA%94%E8%AF%95JAVA/JAVA2.html","title":"JAVA2","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-05-12T00:00:00.000Z","tags":null,"title":"JAVA2","category":["归档"],"description":"(构造)方法的重载：一同三不同 super的两个作用： 用在构造方法里面：super（参数），必须位于构造方法的第一条语句，用来调用父类的构造方法 this两个作用： 用在构造方法里卖弄：this（参数），必须位于构造方法的第一条语句，用来调用本类的其他构造方法 静态变量 x可以被类名.x引用也可以被对象名.x引用，而非静态的只能通过对象名引用 静态方...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/04_%E5%BD%92%E6%A1%A3/%E5%BA%94%E8%AF%95JAVA/JAVA2.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"JAVA2"}],["meta",{"property":"og:description","content":"(构造)方法的重载：一同三不同 super的两个作用： 用在构造方法里面：super（参数），必须位于构造方法的第一条语句，用来调用父类的构造方法 this两个作用： 用在构造方法里卖弄：this（参数），必须位于构造方法的第一条语句，用来调用本类的其他构造方法 静态变量 x可以被类名.x引用也可以被对象名.x引用，而非静态的只能通过对象名引用 静态方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T11:16:36.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-04T11:16:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAVA2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-04T11:16:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":3,"title":"(构造)方法的重载：一同三不同","slug":"构造-方法的重载-一同三不同","link":"#构造-方法的重载-一同三不同","children":[]},{"level":3,"title":"super的两个作用：","slug":"super的两个作用","link":"#super的两个作用","children":[]},{"level":3,"title":"this两个作用：","slug":"this两个作用","link":"#this两个作用","children":[]},{"level":3,"title":"静态变量","slug":"静态变量","link":"#静态变量","children":[]},{"level":3,"title":"静态方法也可以写出","slug":"静态方法也可以写出","link":"#静态方法也可以写出","children":[]},{"level":3,"title":"方法重写","slug":"方法重写","link":"#方法重写","children":[]},{"level":3,"title":"访问控制","slug":"访问控制","link":"#访问控制","children":[]},{"level":3,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":3,"title":"Final","slug":"final","link":"#final","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"I/O流","slug":"i-o流","link":"#i-o流","children":[]}],"git":{"createdTime":1752378228000,"updatedTime":1756984596000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":137,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":2.66,"words":799},"filePathRelative":"article/04_归档/应试JAVA/JAVA2.md","localizedDate":"2025年5月12日","excerpt":"<h3>(构造)方法的重载：一同三不同</h3>\\n<h3>super的两个作用：</h3>\\n<ol>\\n<li>用在构造方法里面：super（参数），必须位于构造方法的第一条语句，用来调用父类的构造方法</li>\\n</ol>\\n<h3>this两个作用：</h3>\\n<ol>\\n<li>用在构造方法里卖弄：this（参数），必须位于构造方法的第一条语句，用来调用本类的其他构造方法</li>\\n</ol>\\n<h3>静态变量</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">static</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> int</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> x</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,d as data};
