import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as s,a as n,o as l}from"./app-B8djYZjU.js";const t={};function d(o,i){return l(),a("div",null,i[0]||(i[0]=[s(`<h1 id="_00-前言" tabindex="-1"><a class="header-anchor" href="#_00-前言"><span>00. 前言</span></a></h1><p><strong>通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，可以这么说吧</strong></p><h1 id="_01-注释符" tabindex="-1"><a class="header-anchor" href="#_01-注释符"><span>01. 注释符</span></a></h1><p><code>//</code></p><h1 id="_02-post" tabindex="-1"><a class="header-anchor" href="#_02-post"><span>02. POST</span></a></h1><p><strong>超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以<code>$_POST</code>的形式检索或引用其中的数据</strong></p><ul><li>例如</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Array</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    [user] =&gt; 用户输入的用户名</span></span>
<span class="line"><span>    [pass] =&gt; 用户输入的密码</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示<br><code>&lt;form method=&quot;post&quot; action=&quot;submit.php&quot;&gt; 内容 &lt;/form&gt;</code></p></li><li><p>在html中通常以<code>&lt;input type=&quot;text&quot; id=&quot;user&quot; name=&quot;user&quot;&gt;</code>中的name来定义POST中键的内容</p></li><li><p>常用这样的形式进行判断<code>if (isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;]))</code>可以判断user和pass键是否为空</p></li><li><p>用<code>$username = $_POST[&quot;user&quot;];</code>的方式提取POST内容</p><ul><li><code>$_POST[&quot; 键 &quot;]</code>:来检索键的内容,并赋值给username</li></ul></li></ul><h1 id="_03-对象" tabindex="-1"><a class="header-anchor" href="#_03-对象"><span>03. 对象</span></a></h1><h3 id="_3x01" tabindex="-1"><a class="header-anchor" href="#_3x01"><span>3x01</span></a></h3><p><strong>用<code>$con = new SQLite3(&quot;../users.db&quot;);</code>类似于这样的形式创建一个SQLite3的对象</strong></p><ul><li>创建对象的函数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$con-&gt;query(...)\`：调用$con的query方法,(...)内填写参数，例如这个可以填写sql语句</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>也可以用这种方式创建</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$config = new Config([</span></span>
<span class="line"><span>    &quot;site_name&quot; =&gt; &quot;My Website&quot;,</span></span>
<span class="line"><span>    &quot;debug_mode&quot; =&gt; true,</span></span>
<span class="line"><span>]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3x02" tabindex="-1"><a class="header-anchor" href="#_3x02"><span>3x02</span></a></h3><p><strong>构造方法</strong><br><code>__construct(参数)</code>，在没有时会默认添加<br> 例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public function __construct() { $this-&gt;username = &quot;default_user&quot;; // 设置默认用户名 $this-&gt;email = &quot;default@example.com&quot;; // 设置默认邮箱 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_04-函数" tabindex="-1"><a class="header-anchor" href="#_04-函数"><span>04. 函数</span></a></h1><h3 id="_4x01" tabindex="-1"><a class="header-anchor" href="#_4x01"><span>4x01.</span></a></h3><p>一个简单的建立cookie的PHP代码</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">setcookie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> urlencode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">base64_encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">serialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$perm_res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))),</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">86400</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>setcookie(...)</code></strong>：这是 PHP 的一个内置函数，用于设置 HTTP cookie。</li></ul><ol><li><strong><code>time() + (86400 * 30)</code></strong>：这是<code>setcookie(...)</code>的一个参数，用于设置 cookie 的过期时间。<code>time()</code> 函数返回当前的 Unix 时间戳（自 1970 年 1 月 1 日以来的秒数）。<code>86400</code> 是一天的秒数（24小时 × 60分钟 × 60秒），因此 <code>86400 * 30</code> 表示 30 天的秒数。将当前时间戳加上 30 天的秒数，得到 cookie 的过期时间。</li><li><strong><code>&quot;/&quot;</code></strong>：这是<code>setcookie(...)</code>的一个参数,用于设置cookie 的路径，表示该 cookie 在整个网站上都有效。</li></ol><ul><li><p><strong><code>&quot;login&quot;</code></strong>：这是 cookie 的名称。在这里，cookie 被命名为 <code>login</code>。</p></li><li><p><strong><code>urlencode(...)</code></strong>：这是一个函数，用于对字符串进行 URL 编码，以确保在 URL 中安全传输。它会对特殊字符进行编码。</p></li><li><p><strong><code>base64_encode(...)</code></strong>：这是一个函数，用于将数据进行 Base64 编码。Base64 编码可以将二进制数据转换为 ASCII 字符串，通常用于在 URL 或 cookie 中传输数据。</p></li><li><p><mark><strong><code>serialize($perm_res)</code></strong>：这是一个函数，用于将对象或数组转换为字符串格式，以便存储。这里将 <code>$perm_res</code> 对象序列化为字符串。</mark></p></li></ul><h3 id="_4x02" tabindex="-1"><a class="header-anchor" href="#_4x02"><span>4x02.</span></a></h3><p>实现页面重定向的 PHP 代码行，常用于控制用户流向特定页面，确保用户在访问敏感资源之前进行身份验证。</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Location: authentication.php&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong><code>header(...)</code></strong>：这是 PHP 的一个内置函数，用于发送原始 HTTP 头部信息。它必须在任何输出（如 HTML 或空格）之前调用，因为 HTTP 头部必须在响应体之前发送。</p></li><li><p><strong><code>&quot;Location: authentication.php&quot;</code></strong>：这是传递给 <code>header</code> 函数的字符串参数。它指定了一个 HTTP 头部，表示客户端（通常是浏览器）应该重定向到的 URL。</p><ol><li><p><strong><code>Location:</code></strong>：这是一个 HTTP 头部字段，指示浏览器应该重定向到另一个页面。</p></li><li><ul><li><strong><code>authentication.php</code></strong>：这是目标页面的相对路径或 URL。在这个例子中，用户将被重定向到名为 <code>authentication.php</code> 的页面。</li></ul></li></ol></li></ul><h3 id="_4x03" tabindex="-1"><a class="header-anchor" href="#_4x03"><span>4x03.</span></a></h3><p>终止程序执行</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">die</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>这是一个 PHP 函数，用于终止当前脚本的执行。调用 <code>die()</code> 后，脚本将停止运行，后续的代码将不会被执行。这个函数通常用于在发生错误或满足特定条件时，立即停止程序的执行。</li></ul><h3 id="_4x04" tabindex="-1"><a class="header-anchor" href="#_4x04"><span>4x04.</span></a></h3><p>引入文件,这个引入了名为cookie.php的外部文件</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">require_once</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cookie.php&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4x05" tabindex="-1"><a class="header-anchor" href="#_4x05"><span>4x05.</span></a></h3><p>用于启动一个新的会话或恢复一个已存在的会话。会话管理是Web开发中用于跟踪用户状态的一种机制，它允许在多个页面请求之间保持用户数据。</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">session_start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4x06-反序列化函数" tabindex="-1"><a class="header-anchor" href="#_4x06-反序列化函数"><span>4x06. 反序列化函数</span></a></h3><p><mark>使用 <code>urldecode()</code> 解码 cookie 值，然后使用 <code>base64_decode()</code> 解码，再使用 <code>unserialize()</code> 反序列化，恢复 <code>permissions</code> 对象。</mark></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$g = $perm-&gt;is_guest();</span></span>
<span class="line"><span>		$a = $perm-&gt;is_admin();</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4x07-序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_4x07-序列化和反序列化"><span>4x07. 序列化和反序列化</span></a></h3><p>曾提到过<code>unserialize()</code>和<code>serialize()</code>函数，在这里讲一讲序列化和反序列化</p><h4 id="x7p1-序列化" tabindex="-1"><a class="header-anchor" href="#x7p1-序列化"><span>x7p1. 序列化</span></a></h4><ul><li>PHP 会将对象的类名和所有公共、保护和私有属性的名称和值转换为字符串。</li><li>例如，假设 <code>$perm_res</code> 对象的 <code>username</code> 属性为 &quot;user1&quot;，<code>password</code> 属性为 &quot;pass123&quot;。序列化后的字符串可能看起来像这样：</li></ul><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;permissions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pass123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,48),n("p",{"s:8:username;s:18:adminor1":'1--;s:8:"password";s:1:"1";'},'O:4:"perm":2:',-1),s('<ol><li><p><strong>O:10:&quot;permissions&quot;</strong>:</p><ul><li><code>O</code> 表示这是一个对象（Object）。</li><li><code>10</code> 是对象类名的长度（即 &quot;permissions&quot; 的长度为 10）。</li><li><code>&quot;permissions&quot;</code> 是对象的类名。</li></ul></li><li><p><strong>:2:</strong>:</p><ul><li><code>2</code> 表示这个对象有两个属性。</li></ul></li><li><p><strong>{...}</strong>:</p><ul><li>大括号 <code>{}</code> 包含了对象的属性及其值。</li></ul></li><li><p><strong>s:8:&quot;username&quot;;</strong>:</p><ul><li><code>s</code> 表示这是一个字符串（string）。</li><li><code>8</code> 是字符串的长度（即 &quot;username&quot; 的长度为 8）。</li><li><code>&quot;username&quot;</code> 是属性的名称。</li></ul></li><li><p><strong>s:6:&quot;user1&quot;;</strong>:</p><ul><li><code>s</code> 表示这是一个字符串。</li><li><code>6</code> 是字符串的长度（即 &quot;user1&quot; 的长度为 6）。</li><li><code>&quot;user1&quot;</code> 是属性的值。</li></ul></li><li><p><strong>s:8:&quot;password&quot;;</strong>:</p><ul><li><code>s</code> 表示这是一个字符串。</li><li><code>8</code> 是字符串的长度（即 &quot;password&quot; 的长度为 8）。</li><li><code>&quot;password&quot;</code> 是属性的名称。</li></ul></li><li><p><strong>s:8:&quot;pass123&quot;;</strong>:</p><ul><li><code>s</code> 表示这是一个字符串。</li><li><code>8</code> 是字符串的长度（即 &quot;pass123&quot; 的长度为 8）。</li><li><code>&quot;pass123&quot;</code> 是属性的值。</li></ul></li></ol><h4 id="x7p2-反序列化" tabindex="-1"><a class="header-anchor" href="#x7p2-反序列化"><span>x7p2. 反序列化</span></a></h4><p>在 PHP 中，<code>unserialize()</code> 函数用于将一个序列化的字符串转换回原来的 PHP 值，包括对象、数组等。具体来说，当您调用 <code>unserialize($serialized_string)</code> 时，函数会执行以下操作：</p><ol><li><p><strong>解析字符串</strong>: <code>unserialize()</code> 会解析传入的序列化字符串，识别其中的类名、属性和它们的值。</p></li><li><p><strong>创建对象</strong>: 如果序列化字符串表示的是一个对象，<code>unserialize()</code> 会根据字符串中的类名创建一个该类的实例。</p></li><li><p><strong>恢复属性</strong>: 函数会将序列化字符串中存储的属性值恢复到新创建的对象中。</p></li></ol><ul><li><h5 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h5><ul><li><strong>返回对象</strong>: 如果序列化字符串有效且表示一个对象，<code>unserialize()</code> 将返回该对象的实例。</li><li><strong>返回数组</strong>: 如果序列化字符串表示一个数组，<code>unserialize()</code> 将返回该数组。</li><li><strong>返回 <code>false</code></strong>: 如果序列化字符串无效或无法解析，<code>unserialize()</code> 将返回 <code>false</code>。这通常发生在字符串格式不正确或类未定义的情况下。</li></ul></li></ul><h3 id="_4x08-读取文件" tabindex="-1"><a class="header-anchor" href="#_4x08-读取文件"><span>4x08. 读取文件</span></a></h3><p>返回一个字符串，用于读取指定文件的内容并将其作为字符串返回</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>file_get_contents(文件路径)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_05-闲话多序" tabindex="-1"><a class="header-anchor" href="#_05-闲话多序"><span>05. 闲话多序</span></a></h1><h4 id="php与html联合实现逻辑" tabindex="-1"><a class="header-anchor" href="#php与html联合实现逻辑"><span>PHP与html联合实现逻辑</span></a></h4><ol><li><strong>用户请求</strong>：用户在浏览器中输入 URL，向 Web 服务器发送请求。</li><li><strong>Web 服务器接收请求</strong>：Web 服务器（如 Apache、Nginx 等）接收到请求后，识别请求的文件类型。</li><li><strong>PHP 解析</strong>：如果请求的文件是 PHP 文件，Web 服务器会将该文件传递给 PHP 解析器。PHP 解析器会执行文件中的 PHP 代码。</li><li><strong>执行逻辑</strong>：在 PHP 代码中，处理用户输入、进行数据库查询、设置 cookie、生成消息等逻辑。</li><li><strong>生成 HTML</strong>：PHP 代码执行完毕后，生成最终的 HTML 内容。此时，所有的 PHP 代码已经被处理，用户只会看到生成的 HTML。</li><li><strong>返回响应</strong>：Web 服务器将生成的 HTML 内容返回给用户的浏览器。</li><li><strong>浏览器渲染</strong>：用户的浏览器接收到 HTML 内容后，进行渲染，显示给用户。</li></ol>',11)]))}const p=e(t,[["render",d],["__file","PHP笔记.html.vue"]]),c=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/PHP%E7%AC%94%E8%AE%B0.html","title":"PHP笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-19T00:00:00.000Z","tags":null,"title":"PHP笔记","category":["项目"],"description":"00. 前言 通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，可以这么说吧 01. 注释符 // 02. POST 超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以$_POST的形式检索或引用其中的数据 例如 在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示 <form method...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/PHP%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"PHP笔记"}],["meta",{"property":"og:description","content":"00. 前言 通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，可以这么说吧 01. 注释符 // 02. POST 超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以$_POST的形式检索或引用其中的数据 例如 在表单的前端通常是以这种形式对接php代码的，在form标签的属性中展示 <form method..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T07:01:36.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T07:01:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PHP笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-21T07:01:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":3,"title":"3x01","slug":"_3x01","link":"#_3x01","children":[]},{"level":3,"title":"3x02","slug":"_3x02","link":"#_3x02","children":[]},{"level":3,"title":"4x01.","slug":"_4x01","link":"#_4x01","children":[]},{"level":3,"title":"4x02.","slug":"_4x02","link":"#_4x02","children":[]},{"level":3,"title":"4x03.","slug":"_4x03","link":"#_4x03","children":[]},{"level":3,"title":"4x04.","slug":"_4x04","link":"#_4x04","children":[]},{"level":3,"title":"4x05.","slug":"_4x05","link":"#_4x05","children":[]},{"level":3,"title":"4x06. 反序列化函数","slug":"_4x06-反序列化函数","link":"#_4x06-反序列化函数","children":[]},{"level":3,"title":"4x07. 序列化和反序列化","slug":"_4x07-序列化和反序列化","link":"#_4x07-序列化和反序列化","children":[]},{"level":3,"title":"4x08. 读取文件","slug":"_4x08-读取文件","link":"#_4x08-读取文件","children":[]}],"git":{"createdTime":1734598308000,"updatedTime":1734764496000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":107,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":6.62,"words":1987},"filePathRelative":"article/01_项目/PHP笔记.md","localizedDate":"2024年12月19日","excerpt":"\\n<p><strong>通过web题学习PHP，只是为了培养PHP代码审计的能力罢了，可以这么说吧</strong></p>\\n<h1>01. 注释符</h1>\\n<p><code>//</code></p>\\n<h1>02. POST</h1>\\n<p><strong>超级全局数组，返回一个数组，用于接收通过 HTTP POST 方法提交的数据。以<code>$_POST</code>的形式检索或引用其中的数据</strong></p>\\n<ul>\\n<li>例如</li>\\n</ul>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Array</span></span>\\n<span class=\\"line\\"><span>(</span></span>\\n<span class=\\"line\\"><span>    [user] =&gt; 用户输入的用户名</span></span>\\n<span class=\\"line\\"><span>    [pass] =&gt; 用户输入的密码</span></span>\\n<span class=\\"line\\"><span>)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,c as data};
