import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as n}from"./app-Vb9uGlqk.js";const l={};function t(p,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="加载器是什么" tabindex="-1"><a class="header-anchor" href="#加载器是什么"><span>加载器是什么</span></a></h1><p>加载器（Loader）是操作系统中的一个组件，负责将程序从磁盘或其他存储介质加载到内存中，并准备其执行。加载器的工作通常包括以下几个步骤：</p><ol><li><p><strong>文件读取</strong>：加载器首先读取可执行文件（如ELF文件）的内容到内存中。</p></li><li><p><strong>解析元数据</strong>：加载器解析文件中的元数据，如ELF头、程序头表、节头表等，以了解程序的结构和各个段（segments）的信息。</p></li><li><p><strong>地址分配</strong>：加载器决定程序在内存中的加载地址。对于静态链接的程序，这通常是固定的；而对于动态链接的程序，加载器需要解析动态链接库（dynamic libraries）并分配地址。</p></li><li><p><strong>段加载</strong>：加载器将程序的各个段（如代码段、数据段、BSS段等）加载到内存中的适当位置。</p></li><li><p><strong>重定位</strong>：对于动态链接的程序，加载器需要解析和应用重定位表，以确保程序中的引用指向正确的内存地址。</p></li><li><p><strong>初始化</strong>：加载器可能会执行一些初始化操作，如设置堆栈、初始化全局变量、调用构造函数等。</p></li><li><p><strong>执行</strong>：一旦程序被加载和初始化，加载器会将控制权交给程序的入口点，程序开始执行。</p></li></ol><p>加载器在操作系统中扮演着至关重要的角色，它不仅负责程序的加载，还负责管理程序的生命周期，包括内存管理、文件描述符管理等。在现代操作系统中，加载器通常是动态链接器（dynamic linker）的一部分，它负责处理程序运行时的动态链接和库加载。</p><h2 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h2><p>把临时生成的假地址在连接过程赋正确的新地址的行为</p><h1 id="github-token" tabindex="-1"><a class="header-anchor" href="#github-token"><span>GitHub Token</span></a></h1><p>是用于访问 GitHub API 的一种安全凭证，它允许你通过编程方式与 GitHub 进行交互。使用 Token 可以进行各种操作，比如自动化脚本、CI/CD 流程、备份仓库等。</p><p><strong>创建 GitHub Token 的步骤如下：</strong></p><ol><li>登录你的 GitHub 账户。</li><li>点击右上角的头像，选择“Settings”（设置）。</li><li>在侧边栏中，点击“Developer settings”（开发者设置）。</li><li>在“Developer settings”页面，点击“Personal access tokens”（个人访问令牌）。</li><li>点击“Generate new token”（生成新令牌）。</li><li>给 Token 设置一个名称，选择 Token 的权限范围（例如，repo、admin:org 等）。</li><li>生成 Token 后，确保复制并保存好这个 Token，因为它不会再次显示。</li></ol><p><strong>安全提示：</strong></p><ul><li>永远不要将你的 Token 公开或分享给他人。</li><li>定期更新你的 Token，以减少泄露的风险。</li><li>在使用 Token 时，确保遵循最小权限原则，只授予必要的权限。</li></ul><hr><h1 id="网站提供服务的流程" tabindex="-1"><a class="header-anchor" href="#网站提供服务的流程"><span>网站提供服务的流程</span></a></h1><p><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/1.png" alt="1" loading="lazy"><br> 在上图中，用户访问实验楼主页进行了如下过程：</p><ol><li>在 Web 浏览器中输入 <a href="http://www.shiyanlou.com" target="_blank" rel="noopener noreferrer">www.shiyanlou.com</a> 连接到实验楼服务器。</li><li>业务逻辑层的 Web 服务器从本地存储中加载 <em><strong>index.php</strong></em> 脚本并解析。</li><li>脚本连接位于数据访问层的 <a href="https://so.csdn.net/so/search?q=DBMS&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">DBMS</a>（数据库管理系统），并执行 Sql 语句。</li><li>数据访问层的<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">数据库管理系统</a>返回 Sql 语句执行结果给 Web 服务器。</li><li>业务逻辑层的 Web 服务器将 Web 页面封装成 HTML 格式发送给表示层的 Web 浏览器。</li><li>表示层的 Web 浏览器解析 HTML 文件，将内容展示给用户。</li></ol><hr><h1 id="将手机投屏到电脑上" tabindex="-1"><a class="header-anchor" href="#将手机投屏到电脑上"><span>将手机投屏到电脑上：</span></a></h1><p>参考<a href="https://blog.csdn.net/lin_miao_2023/article/details/142314814?ops_request_misc=%257B%2522request%255Fid%2522%253A%252284543d0f4323a2328eb3c39aeab4b9b8%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=84543d0f4323a2328eb3c39aeab4b9b8&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-142314814-null-null.142%5Ev100%5Epc_search_result_base8&amp;utm_term=%E5%A5%BD%E7%94%A8%E7%9A%84%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E5%88%B0%E7%94%B5%E8%84%91&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">不用投屏软件如何将手机投屏到电脑_手机有线投屏到电脑-CSDN博客</a>文章</p><p>所有软件在C:\\Users\\l1709\\Desktop\\touping文件夹下</p><p>在此目录cmd打开命令行<br><code>adb device</code>查看连接的设备<br> 打开scrcpy的文件夹的cmd输入<br><code>scrcpy</code><br> 即可连接成功</p><hr><p>自动上传当前笔记内所有的图片到图床：</p><p><code>upload all images</code></p><hr><p>QA：能不能实现这样一个工作链，在github创建一个私有仓库存放我的博客md文件,然后通过gitAction把文件拉取到另一个公开项目，的src文件夹下的public文件夹?</p><p>可以实现这样的工作链，使用 GitHub Actions 将私有仓库中的 WordPress 博客文件拉取到另一个公开项目的 <code>src/public</code> 文件夹下。以下是实现这个工作链的步骤和示例代码。</p><h3 id="步骤概述" tabindex="-1"><a class="header-anchor" href="#步骤概述"><span>步骤概述</span></a></h3><ol><li><strong>创建私有仓库</strong>: 在 GitHub 上创建一个私有仓库，用于存放你的 WordPress 博客文件。</li><li><strong>创建公开仓库</strong>: 创建一个公开的 GitHub 仓库，用于存放你希望公开的内容。</li><li><strong>配置 GitHub Actions</strong>: 在公开仓库中配置 GitHub Actions，以便从私有仓库拉取文件并将其放入 <code>src/public</code> 文件夹。</li></ol><h3 id="github-actions-配置示例" tabindex="-1"><a class="header-anchor" href="#github-actions-配置示例"><span>GitHub Actions 配置示例</span></a></h3><p>在你的公开仓库中，创建一个 <code>.github/workflows</code> 文件夹，并在其中创建一个 YAML 文件（例如 <code>sync-blog.yml</code>），内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Sync Blog Files</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 你可以根据需要更改为其他分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Checkout Public Repository</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Checkout Private Repository</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;你的私有仓库的用户名&gt;/&lt;私有仓库名&gt;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.PRIVATE_REPO_TOKEN }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">private-repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Copy Files to Public Folder</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          mkdir -p src/public</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          cp -r private-repo/path/to/your/wp/files/* src/public/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详细说明" tabindex="-1"><a class="header-anchor" href="#详细说明"><span>详细说明</span></a></h3><ol><li><p><strong>触发条件</strong>:</p><ul><li><code>on: push</code>: 当主分支（<code>main</code>）有新的推送时触发工作流。</li></ul></li><li><p><strong>作业定义</strong>:</p><ul><li><code>jobs</code>: 定义一个名为 <code>sync</code> 的作业。</li><li><code>runs-on: ubuntu-latest</code>: 指定作业在最新的 Ubuntu 环境中运行。</li></ul></li><li><p><strong>步骤</strong>:</p><ul><li><strong>Checkout Public Repository</strong>: 使用 <code>actions/checkout@v3</code> 动作检出公开仓库的代码。</li><li><strong>Checkout Private Repository</strong>: 使用相同的动作检出私有仓库的代码。需要提供私有仓库的路径和一个 GitHub Token（存储在 Secrets 中），以便进行身份验证。</li><li><strong>Copy Files to Public Folder</strong>: 创建 <code>src/public</code> 文件夹，并将私有仓库中的 WordPress 文件复制到该文件夹中。</li></ul></li></ol><h3 id="设置-github-token" tabindex="-1"><a class="header-anchor" href="#设置-github-token"><span>设置 GitHub Token</span></a></h3><ol><li>在 GitHub 上，进入你的公开仓库的设置。</li><li>找到 &quot;Secrets and variables&quot; 部分，点击 &quot;Actions&quot;。</li><li>创建一个新的 secret，命名为 <code>PRIVATE_REPO_TOKEN</code>，并将其值设置为你的 GitHub 个人访问令牌（需要具有访问私有仓库的权限）。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过以上步骤，你可以实现一个工作链，将私有仓库中的 WordPress 博客文件自动拉取到公开项目的 <code>src/public</code> 文件夹中。每当你向私有仓库推送更新时，GitHub Actions 将自动执行这个工作流，确保公开项目中的文件始终是最新的。</p><hr><p>要将本地 Git 仓库与远程 GitHub 仓库连接，您可以按照以下步骤进行操作：</p><h3 id="_1-创建一个新的-github-仓库" tabindex="-1"><a class="header-anchor" href="#_1-创建一个新的-github-仓库"><span>1. 创建一个新的 GitHub 仓库</span></a></h3><ol><li>登录到 <a href="https://github.com/" target="_blank" rel="noopener noreferrer">GitHub</a>。</li><li>点击右上角的 <strong>“+”</strong> 按钮，选择 <strong>“New repository”</strong>。</li><li>输入仓库名称，选择 <strong>“Public”</strong> 或 <strong>“Private”</strong>，然后点击 <strong>“Create repository”</strong>。</li></ol><h3 id="_2-在本地创建-git-仓库-如果尚未创建" tabindex="-1"><a class="header-anchor" href="#_2-在本地创建-git-仓库-如果尚未创建"><span>2. 在本地创建 Git 仓库（如果尚未创建）</span></a></h3><p>如果您还没有本地 Git 仓库，可以使用以下命令创建一个新的仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-project</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-project</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-添加远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-添加远程仓库"><span>3. 添加远程仓库</span></a></h3><p>使用 <code>git remote add</code> 命令将本地仓库与远程 GitHub 仓库连接。将 <code>&lt;USERNAME&gt;</code> 替换为您的 GitHub 用户名，将 <code>&lt;REPOSITORY&gt;</code> 替换为您创建的仓库名称：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">USERNAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">REPOSITOR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Y&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-添加文件并提交" tabindex="-1"><a class="header-anchor" href="#_4-添加文件并提交"><span>4. 添加文件并提交</span></a></h3><p>将文件添加到本地仓库并进行提交：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Initial commit&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-推送到远程仓库"><span>5. 推送到远程仓库</span></a></h3><p>将本地提交推送到远程 GitHub 仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意：如果您的默认分支是 <code>master</code>，请将 <code>main</code> 替换为 <code>master</code>。</p></blockquote><h3 id="_6-验证连接" tabindex="-1"><a class="header-anchor" href="#_6-验证连接"><span>6. 验证连接</span></a></h3><p>您可以使用以下命令查看远程仓库的连接是否成功：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将显示您已连接的远程仓库的 URL。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>通过以上步骤，您可以将本地 Git 仓库与远程 GitHub 仓库连接。现在，您可以在本地进行更改并将其推送到 GitHub，以便与他人共享或进行版本控制。</p><h1 id="hack-google语法" tabindex="-1"><a class="header-anchor" href="#hack-google语法"><span>hack google语法</span></a></h1><p>搜集语法<br><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/0171ae6902c18f6e757464831d403c74.png" alt="" loading="lazy"><br> 常用语法</p><blockquote><p>inurl: 用于查找含有该值的所有url网址网页。例：inurl:mail（可找一些免费邮箱）</p><p>related:：找出和该网址类似的网站，比如想知道和amazon.com类似的大型网络书店有哪些时输入</p><p>amazon.com网址。例：related:amazon.com</p><p>intext: 只搜索网页部分中包含的文字(也就是忽略了标题,URL等的文字).</p><p>filetype: 搜索通过文件的后缀或者扩展名来搜索含有这类文件的网页</p><p>intitle: 标题中存在关键字的网页</p><p>allintitle: 搜索所有关键字构成标题的网页. 但是推荐不要使用</p><p>link: 可以得到一个所有包含了某个指定URL的页面列表. 当我们使用link:URL提交查询的时候，Google会返回跟此URL做了链接的网站。例 ［link:www.baidu.com］，提交这个查询，我们将得到所有跟www.baidu.com这个网站做了链接的网站。（link是个单独的语法，只能单独使用，且后面不能跟查询关键词，只能跟URL）</p><p>location: 当我们提交location进行Google新闻查询的时候，Google仅会返回你当前指定区的跟查询关键词相关的网页。例[ queen location:canada ]，提交这个查询，Google会返回加拿大的跟查询关键词”queen”相匹配的网站。</p><p>site: 搜索含有该域名的网页，google会限制尽在某个网站或者说域下面进行搜索。<br> 使用site进行站点搜索时，一般常见用法有：<br> site:ooxx.com filetype:xls # 支持组合搜索<br> site:xxx.com admin # 一般公司的后台系统都带有admin啊，login啊，内部系统啊之类的关键字<br> site:xxx.xxx login<br> site:xxx.xxx system<br> site:xxx.xxx 管理<br> site:xxx.xxx 登录<br> site:xxx.xxx 内部<br> site:xxx.xxx 系统<br> site:xxx.xxx 邮件<br> site:xxx.xxx email<br> site:xxx.xxx qq</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241211193901.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,65)]))}const d=s(l,[["render",t],["__file","杂物.html.vue"]]),o=JSON.parse('{"path":"/article/03_%E8%B5%84%E6%BA%90/%E6%9D%82%E7%89%A9.html","title":"杂物","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-10T00:00:00.000Z","category":["资源"],"tags":["乱七八糟"],"title":"杂物","description":"加载器是什么 加载器（Loader）是操作系统中的一个组件，负责将程序从磁盘或其他存储介质加载到内存中，并准备其执行。加载器的工作通常包括以下几个步骤： 文件读取：加载器首先读取可执行文件（如ELF文件）的内容到内存中。 解析元数据：加载器解析文件中的元数据，如ELF头、程序头表、节头表等，以了解程序的结构和各个段（segments）的信息。 地址分配...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/03_%E8%B5%84%E6%BA%90/%E6%9D%82%E7%89%A9.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"杂物"}],["meta",{"property":"og:description","content":"加载器是什么 加载器（Loader）是操作系统中的一个组件，负责将程序从磁盘或其他存储介质加载到内存中，并准备其执行。加载器的工作通常包括以下几个步骤： 文件读取：加载器首先读取可执行文件（如ELF文件）的内容到内存中。 解析元数据：加载器解析文件中的元数据，如ELF头、程序头表、节头表等，以了解程序的结构和各个段（segments）的信息。 地址分配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-31T12:12:10.000Z"}],["meta",{"property":"article:tag","content":"乱七八糟"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-31T12:12:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"杂物\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/1.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/0171ae6902c18f6e757464831d403c74.png\\",\\"https://cdn.jsdelivr.net/gh/fakeppa/blog-img/20241211193901.png\\"],\\"datePublished\\":\\"2024-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-31T12:12:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"重定向","slug":"重定向","link":"#重定向","children":[{"level":3,"title":"步骤概述","slug":"步骤概述","link":"#步骤概述","children":[]},{"level":3,"title":"GitHub Actions 配置示例","slug":"github-actions-配置示例","link":"#github-actions-配置示例","children":[]},{"level":3,"title":"详细说明","slug":"详细说明","link":"#详细说明","children":[]},{"level":3,"title":"设置 GitHub Token","slug":"设置-github-token","link":"#设置-github-token","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"1. 创建一个新的 GitHub 仓库","slug":"_1-创建一个新的-github-仓库","link":"#_1-创建一个新的-github-仓库","children":[]},{"level":3,"title":"2. 在本地创建 Git 仓库（如果尚未创建）","slug":"_2-在本地创建-git-仓库-如果尚未创建","link":"#_2-在本地创建-git-仓库-如果尚未创建","children":[]},{"level":3,"title":"3. 添加远程仓库","slug":"_3-添加远程仓库","link":"#_3-添加远程仓库","children":[]},{"level":3,"title":"4. 添加文件并提交","slug":"_4-添加文件并提交","link":"#_4-添加文件并提交","children":[]},{"level":3,"title":"5. 推送到远程仓库","slug":"_5-推送到远程仓库","link":"#_5-推送到远程仓库","children":[]},{"level":3,"title":"6. 验证连接","slug":"_6-验证连接","link":"#_6-验证连接","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]}],"git":{"createdTime":1733762599000,"updatedTime":1735647130000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":455,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":8.77,"words":2630},"filePathRelative":"article/03_资源/杂物.md","localizedDate":"2024年12月10日","excerpt":"\\n<p>加载器（Loader）是操作系统中的一个组件，负责将程序从磁盘或其他存储介质加载到内存中，并准备其执行。加载器的工作通常包括以下几个步骤：</p>\\n<ol>\\n<li>\\n<p><strong>文件读取</strong>：加载器首先读取可执行文件（如ELF文件）的内容到内存中。</p>\\n</li>\\n<li>\\n<p><strong>解析元数据</strong>：加载器解析文件中的元数据，如ELF头、程序头表、节头表等，以了解程序的结构和各个段（segments）的信息。</p>\\n</li>\\n<li>\\n<p><strong>地址分配</strong>：加载器决定程序在内存中的加载地址。对于静态链接的程序，这通常是固定的；而对于动态链接的程序，加载器需要解析动态链接库（dynamic libraries）并分配地址。</p>\\n</li>\\n<li>\\n<p><strong>段加载</strong>：加载器将程序的各个段（如代码段、数据段、BSS段等）加载到内存中的适当位置。</p>\\n</li>\\n<li>\\n<p><strong>重定位</strong>：对于动态链接的程序，加载器需要解析和应用重定位表，以确保程序中的引用指向正确的内存地址。</p>\\n</li>\\n<li>\\n<p><strong>初始化</strong>：加载器可能会执行一些初始化操作，如设置堆栈、初始化全局变量、调用构造函数等。</p>\\n</li>\\n<li>\\n<p><strong>执行</strong>：一旦程序被加载和初始化，加载器会将控制权交给程序的入口点，程序开始执行。</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,o as data};
